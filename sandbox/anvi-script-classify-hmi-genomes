#!/usr/bin/env python
# -*- coding: utf-8

import sys
import os
import anvio

import pandas as pd
import anvio.terminal as terminal
from anvio.errors import ConfigError, FilesNPathsError

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva']
__requires__ = ["fasta", "kegg-data"]
__provides__ = ["HMI-score"]
__description__ = "Classifies an input genome (fasta file) as having high (HMI) or low metabolic independence (LMI) given a set of metabolic modules which represent HMI."

run = terminal.Run()

def fasta_to_db(fasta, threads=1):
    """Reformats a fasta file and converts it into a contigs db. Returns the path to the contigs db.
    Also returns a list of the files that were generated (for clean-up purposes).
    """

    fasta_prefix = os.path.basename(fasta).split('.')[0]
    reformat_file = fasta_prefix + "-REFORMATTED.fa"
    reformat_command = f"anvi-script-reformat-fasta {fasta} --simplify-names -o {reformat_file} --prefix fasta_prefix"

    run.warning(f"Your input fasta file is being reformatted to simplify the contig names. The new fasta file will be "
                f"called {reformat_file}", lc='magenta', header='STUFF IS HAPPENING')
    os.system(reformat_command)

    db_name = fasta_prefix + "-CONTIGS.db"
    db_command = f"anvi-gen-contigs-database -f {reformat_file} -n {fasta_prefix} -o {db_name} -T {threads}"

    run.warning(f"A contigs database called {db_name} is now being generated.", lc='magenta', header='STUFF IS HAPPENING')
    os.system(db_command)

    return db_name, [reformat_file, db_name]


def get_metabolism_output_for_db(path_to_db, path_to_kegg, threads=1):
    """Annotates the provided database with KEGG KOfams then runs metabolism estimation on it.
    Returns the name of the generated metabolism file.
    """

    annot_command = f"anvi-run-kegg-kofams -c {path_to_db} --kegg-data-dir {path_to_kegg} -T {threads}"
    run.warning(f"Now annotating the contigs database with KEGG KOfams, using the data at {path_to_kegg}",
                    lc='magenta', header='STUFF IS HAPPENING')
    os.system(annot_command)

    db_prefix = os.path.basename(path_to_db).split('.')[0]
    metab_command = f"anvi-estimate-metabolism -c {path_to_db} --kegg-data-dir {path_to_kegg} -O {db_prefix} --include-zeros"
    run.warning("The program `anvi-estimate-metabolism` is being run on your database to estimate the completeness "
                "of metabolic pathways.", lc='magenta', header='STUFF IS HAPPENING')
    os.system(metab_command)

    return f"{db_prefix}_modules.txt"


def get_HMI_mod_list(HMI_file):
    """Extracts a list of HMI modules from the provided file which contains one module accession per line."""

    return [x.strip() for x in open(HMI_file, 'r').readlines()]


def get_HMI_score(metabolism_file, HMI_module_list):
    """Adds up the pathwise completeness scores of each module in the HMI list. Returns the sum."""

    module_df = pd.read_csv(metabolism_file, sep="\t", index_col=0)

    module_not_found = [m for m in HMI_module_list if m not in module_df.index]
    if module_not_found:
        mod_str = ", ".join(module_not_found)
        raise ConfigError(f"Some of the module accession(s) in the provided list were not found in the metabolism "
                          f"output files, which means that they do not exist in the KEGG database you "
                          f"provided. You either have the wrong accession(s), or you need to provide a different "
                          f"database. Here is a list of the missing modules: {mod_str}")

    subset = module_df.loc[HMI_module_list]['pathwise_module_completeness']

    return subset.sum()


def clean_up(files_to_clean):
    """Gets rid of the temporary files generated by this script."""

    for file in files_to_clean:
        os.remove(file)

    run.warning("The temporary files generated by this script have now been removed. If you prefer to keep them, "
                "you can use the flag --keep-tmp-files next time.")


def main(args):
    # input sanity checks
    if not args.fasta_file:
        raise ConfigError("You must provide a fasta file with --fasta.")
    if not args.threshold:
        raise ConfigError("You are missing the threshold parameter.")
    if not args.module_list:
        raise ConfigError("You need to provide a file containing your list of HMI modules with the --module-list parameter.")
    if not args.kegg_data_dir:
        raise ConfigError("You need to provide a path to --kegg-data-dir.")

    # keep track of generated files so we know what to clean up at the end
    files_for_cleanup = []

    # get a contigs db for the genome
    db_path, generated_files = fasta_to_db(args.fasta_file, threads=args.num_threads)
    files_for_cleanup += generated_files

    metabolism_file = get_metabolism_output_for_db(db_path, args.kegg_data_dir, threads=args.num_threads)
    files_for_cleanup.append(metabolism_file)

    HMI_mods = get_HMI_mod_list(args.module_list)

    score = get_HMI_score(metabolism_file, HMI_mods)
    classification = 'LMI'
    if score >= args.threshold:
        classification = 'HMI'

    run.warning(f"Your genome has now been classified as an {classification} genome. It had a score of {score}, where the score is "
                f"simply the sum of all pathwise completeness scores of the modules in the list you provided.",
                lc='green', header='CLASSIFICATION RESULT')

    if not args.keep_tmp_files:
        clean_up(files_for_cleanup)


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupE = parser.add_argument_group('ESSENTIAL INPUTS', "Your genome will be classified based on the sum of the completeness scores of each metabolic "
                                                           "pathway in the provided list.")
    groupE.add_argument(*anvio.A('fasta-file'), **anvio.K('fasta-file', {'help': 'A FASTA file of your genome.'}))
    groupE.add_argument('--module-list', metavar='FILE', help='A file listing the HMI module accession numbers, one module per line.')
    groupE.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir', {'help': 'The path to a directory containing a MODULES.db that hold the HMI module data. '
                                                                'Will be used to run `anvi-estimate-metabolism` on the input genome.'}))
    groupE.add_argument('--threshold', metavar='INT', type=int, help='Genomes with a score over this threshold will be classified as HMI. Must be an '
                                                              'integer.')

    groupO = parser.add_argument_group('OPTIONAL THINGIES', "We highly recommend increasing the number of threads for this one. But take care not to "
                                                            "overload your computer, hmm?")
    groupO.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupO.add_argument('--keep-tmp-files', metavar="", help="You can provide this flag if you want to keep any temporary files.")


    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
