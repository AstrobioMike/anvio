#!/usr/bin/env python
# -*- coding: utf-8

"""A program to generate external or internal genomes files"""

import os
import sys
import glob

import anvio
import anvio.utils as utils
import anvio.filesnpaths as filesnpaths
import anvio.terminal as terminal
import anvio.ccollections as ccollections

from anvio.errors import ConfigError
from anvio.dbops import ContigsDatabase

run = terminal.Run()
progress = terminal.Progress()

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__provides__ = ["external-genomes", "internal-genomes"]
__requires__ = ["contigs-db", "profile-db", "collection"]
__description__ = "Generate an external genomes or internal genomes file"


def main(args):

    if args.profile_db:
        if not (args.contigs_db and args.collection_name):
            raise ConfigError("Since you provided a profile db, we think you want an internal genomes file, but "
                              "anvi'o needs the corresponding contigs db and a collection name, as well.")
        if not args.internal_genomes:
            raise ConfigError("Please provide an output file path for your internal genomes file using the -i parameter.")

        if filesnpaths.is_file_exists(args.internal_genomes, dont_raise=True):
            raise ConfigError(f"The internal genomes file path that you provided already exists, and anvi'o will not overwrite "
                              f"it. Please either remove the existing file or provide a different file path.")

        utils.is_pan_or_profile_db(args.profile_db)

        utils.is_profile_db_and_contigs_db_compatible(args.profile_db, args.contigs_db)

        progress.new('Accessing to the collections table')
        progress.update('...')
        collections = ccollections.Collections()
        collections.populate_collections_dict(args.profile_db)
        progress.end()

        if not collections.collections_dict:
            raise ConfigError("There are no collections in this profile database, so no internal genomes file. "
                              "Consider making some in interactive mode, or importing a collection with "
                              "`anvi-import-collection` (run `anvi-import-collection --help` for links to helpful "
                              "resources).")

        if args.collection_name not in collections.collections_dict:
            raise ConfigError(f"The collection you requested, {args.collection_name}, does not appear to be a "
                              "valid collection in this profile database.")

        contig_db_path = os.path.abspath(args.contigs_db)
        profile_db_path = os.path.abspath(args.profile_db)

        int_genomes_dict = {}
        for bin_name in sorted(collections.collections_dict[args.collection_name]['bin_names'].split(',')):
            int_genomes_dict[bin_name] = {}
            int_genomes_dict[bin_name]['bin_id'] = bin_name
            int_genomes_dict[bin_name]['collection_id'] = args.collection_name
            int_genomes_dict[bin_name]['profile_db_path'] = profile_db_path
            int_genomes_dict[bin_name]['contigs_db_path'] = contig_db_path

        utils.store_dict_as_TAB_delimited_file(int_genomes_dict, args.internal_genomes, key_header='name')

        run.info("Internal genomes file", args.internal_genomes)

    elif args.input_dir:
        if not args.external_genomes:
            raise ConfigError("Please provide an output file path for your external genomes file using the -e parameter.")

        if not filesnpaths.is_file_exists(args.input_dir, dont_raise=True):
            raise ConfigError("The directory you provided does not exist :/")

        if filesnpaths.is_file_exists(args.external_genomes, dont_raise=True):
            raise ConfigError(f"The external genomes file path that you provided already exists, and anvi'o will not overwrite "
                              f"it. Please either remove the existing file or provide a different file path.")

        ext_genomes_dict = {}
        for file in glob.glob(os.path.join(args.input_dir, '*.db')):
            if utils.is_contigs_db(file, dont_raise=True):
                db_path = os.path.abspath(file)
                contigs_db = ContigsDatabase(db_path, run=terminal.Run(verbose=False), progress=terminal.Progress(verbose=False))
                db_name = contigs_db.meta['project_name_str']
                ext_genomes_dict[db_name] = {}
                ext_genomes_dict[db_name]['contigs_db_path'] = db_path

        if not ext_genomes_dict:
            raise ConfigError("No contigs databases were found in the provided input directory.")

        utils.store_dict_as_TAB_delimited_file(ext_genomes_dict, args.external_genomes, key_header='name')

        run.info("External genomes file", args.external_genomes)

    else:
        raise ConfigError("You must provide either an input directory (for an external genomes file) or a "
                          "profile db/contigs db/collection name set (for an internal genomes file). Also, "
                          "just so you don't forget, we also need an output file path in either case.")

if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupE = parser.add_argument_group("EXTERNAL GENOMES FILE", "Provide a directory, and anvi'o will provide an external genomes "
                                                                "file containing all contigs dbs in that directory.")
    groupE.add_argument(*anvio.A('input-dir'), **anvio.K('input-dir'))
    groupE.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes', {'help': "The desired output file path for "
                                                                "the external genomes file."}))

    groupI = parser.add_argument_group("INTERNAL GENOMES FILE", "Provide a contigs db, profile db, and collection name and anvi'o "
                                                                "will bestow upon you an internal genomes file for that collection.")
    groupI.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    groupI.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    groupI.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    groupI.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes', {'help': "The desired output file path for "
                                                                "the internal genomes file."}))

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(1)
