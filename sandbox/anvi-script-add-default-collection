#!/usr/bin/env python
# -*- coding: utf-8
"""Adds a DEAFULT collection with EVERYTHING in it into a pan or profile database."""

import sys

import anvio
import anvio.utils as utils
import anvio.dbops as dbops
import anvio.terminal as terminal

from anvio.argparse import ArgumentParser
from anvio.tables import splits_info_table_name
from anvio.errors import ConfigError, FilesNPathsError
from anvio.tables.collections import TablesForCollections


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['meren']
__provides__ = ["collection", "bin"]
__requires__ = ["pan-db", "profile-db", "contigs-db"]
__description__ = ("A script to add a 'DEFAULT' collection in an anvi'o pan or profile database with "
                   "a bin named 'EVERYTHING' that describes all items available in the profile database")

pp = terminal.pretty_print
run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    parser.add_argument(*anvio.A('pan-or-profile-db'), **anvio.K('pan-or-profile-db'))
    parser.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    parser.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id', {'required': False,
                                                                 'help': "Name for the new bin. If you don't provide any then \
                                                                          it will be named \"EVERYTHING\".",
                                                                 'default': "EVERYTHING"}))
    parser.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name', {'required': False,
                                                               'help': "Name for the new collection. If you don't provide any then \
                                                                        it will be named \"DEFAULT\".",
                                                               'default': "DEFAULT"}))

    args = parser.get_args(parser)

    try:
        TablesForCollections(args.pan_or_profile_db).add_default_collection_to_db(contigs_db_path=args.contigs_db,
                                                                                  collection_name=args.collection_name,
                                                                                  bin_name=args.bin_id)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
