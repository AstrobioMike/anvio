#!/usr/bin/env python
# -*- coding: utf-8

import sys
import argparse

import anvio.db as db
import anvio.tables as t
import anvio.dbops as dbops
import anvio.terminal as terminal 

from anvio.errors import ConfigError


run = terminal.Run()
progress = terminal.Progress()

def process_splits(self, search_results_dict):
    hits_per_contig = {}
    for hit in search_results_dict.values():
        if hits_per_contig.has_key(hit['contig']):
            hits_per_contig[hit['contig']].append(hit)
        else:
            hits_per_contig[hit['contig']] = [hit]

    db_entries_for_splits = []

    for contig in self.contigs_info:
        if not hits_per_contig.has_key(contig):
            # no hits for this contig. pity!
            continue

        for split_name in self.contig_name_to_splits[contig]:
            start = self.splits_info[split_name]['start']
            stop = self.splits_info[split_name]['end']

            # FIXME: this really needs some explanation.
            for hit in hits_per_contig[contig]:
                if hit['stop'] > start and hit['start'] < stop:
                    gene_length = hit['stop'] - hit['start']
                    # if only a part of the gene is in the split:
                    start_in_split = (start if hit['start'] < start else hit['start']) - start
                    stop_in_split = (stop if hit['stop'] > stop else hit['stop']) - start
                    percentage_in_split = (stop_in_split - start_in_split) * 100.0 / gene_length
                    
                    db_entry = tuple([self.next_id(t.hmm_hits_splits_table_name), hit['source'], hit['gene_unique_identifier'], hit['gene_name'], split_name, percentage_in_split, hit['e_value']])
                    db_entries_for_splits.append(db_entry)

    return db_entries_for_splits


def update_annotation_db_from_v2_to_v3(annotation_db_path):
    if annotation_db_path is None:
        raise ConfigError, "No database path is given."

    # make sure someone is not being funny
    dbops.is_annotation_db(annotation_db_path)

    # make sure the version is 2
    annotation_db = db.DB(annotation_db_path, None, ignore_version = True)
    if str(annotation_db.get_version()) != '2':
        raise ConfigError, "Version of this annotation database is not 2 (hence, this script cannot really do anything)."

    progress.new("Trying to upgrade the annotation database")
    progress.update('...')

    # get a copy of the existing data
    hmm_hits_contigs = annotation_db.get_table_as_dict(t.hmm_hits_contigs_table_name)
    sources = annotation_db.get_table_as_dict(t.hmm_hits_info_table_name)

    # drop the old tables:
    annotation_db._exec('''DROP TABLE %s''' % t.hmm_hits_info_table_name)
    annotation_db._exec('''DROP TABLE %s''' % t.hmm_hits_contigs_table_name)
    annotation_db._exec('''DROP TABLE %s''' % t.hmm_hits_splits_table_name)
    annotation_db.commit()

    # create new empty ones
    annotation_db.create_table(t.hmm_hits_info_table_name, t.hmm_hits_info_table_structure, t.hmm_hits_info_table_types)
    annotation_db.create_table(t.hmm_hits_splits_table_name, t.hmm_hits_splits_table_structure, t.hmm_hits_splits_table_types)
    annotation_db.create_table(t.hmm_hits_contigs_table_name, t.hmm_hits_contigs_table_structure, t.hmm_hits_contigs_table_types)

    # set the version
    annotation_db.remove_meta_key_value_pair('version')
    annotation_db.set_version('3')

    # bye
    annotation_db.disconnect()

    # now feed the old data though the TablesForSearches class:
    search_tables = dbops.TablesForSearches(annotation_db_path)
    for source in sources:
        kind_of_search = sources[source]['search_type']
        all_genes_searched_against = [g.strip() for g in sources[source]['genes'].split(',')]
        reference = sources[source]['ref']

        search_results_for_source = {}
        for entry_id in hmm_hits_contigs:
            if hmm_hits_contigs[entry_id]['source'] == source:
                    search_results_for_source[entry_id] = hmm_hits_contigs[entry_id]

        search_tables.append(source, reference, kind_of_search, all_genes_searched_against, search_results_for_source)

    # bye
    progress.end()
    run.info_single("The annotation database successfully upgraded from version 2 to 3!")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A simple script to upgrade annotation database to version 2 to version 3')
    parser.add_argument('annotation_db', metavar = 'ANNOTATION_DB', help = 'Annotation database')
    args = parser.parse_args()

    try:
        update_annotation_db_from_v2_to_v3(args.annotation_db)
    except ConfigError, e:
        print e
        sys.exit(-1)
