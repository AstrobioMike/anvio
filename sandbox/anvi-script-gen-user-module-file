#!/usr/bin/env python
# -*- coding: utf-8
"""
This script converts a file with a list of KOs (one KO per line) into a modules file. The file should be tab-delimited and
contain 3 columns: the KO identifier, the orthology, and the annotation source. If annotation source is KOfam, the orthology
field can be left blank because the script can look it up.

Users can pass the ENTRY, NAME, DEFINITION, and CLASS lines as parameters.
"""

import sys

import anvio

from anvio.argparse import ArgumentParser

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva']
__provides__ = ["user-modules-data"]
__requires__ = ["enzymes-txt"]
__description__ = ("This script generates a user-defined modules file from a tab-delimited file of enzymes and other input parameters.")

run = terminal.Run()
progress = terminal.Progress()

def main(args):
    pass


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupR = parser.add_argument_group('REQUIRED INPUT', "Everything you NEED to make a module definition.")
    groupR.add_argument(*anvio.A('enzymes-txt'), **anvio.K('enzymes-txt', {'required': True,}))
    groupR.add_argument(*anvio.A('module-entry'), **anvio.K('module-entry'))
    groupR.add_argument(*anvio.A('module-name'), **anvio.K('module-name'))
    groupR.add_argument(*anvio.A('module-class'), **anvio.K('module-class'))

    groupD = parser.add_argument_group('OPTIONAL - MODULE DEFINITION', "If you don't pass a module definition, anvi'o will "
                                                                       "make each enzyme in the enzymes-txt file a distinct "
                                                                       "step in the module. Useful if you are not defining a "
                                                                       "metabolic pathway, but rather a characteristic set of "
                                                                       "genes (ie, transporters, tRNA modification enzymes, etc).")
    groupD.add_argument(*anvio.A('module-definition'), **anvio.K('module-definition'))

    groupK = parser.add_argument_group('OPTIONAL - KEGG DATA', "If you want anvi'o to fill in the ORTHOLOGY of "
                                                               "enzymes from source 'KOfam', you might need to "
                                                               "tell her where to find any non-default KEGG data. ")
    groupK.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir'))

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
