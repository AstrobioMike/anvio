#!/usr/bin/env python
# -*- coding: utf-8
"""
This script converts a file with a list of KOs (one KO per line) into a modules file. The file should be tab-delimited and
contain 3 columns: the KO identifier, the orthology, and the annotation source. If annotation source is KOfam, the orthology
field can be left blank because the script can look it up.

Users can pass the ENTRY, NAME, DEFINITION, and CLASS lines as parameters.
"""

import sys

import anvio

from anvio.argparse import ArgumentParser

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva']
__provides__ = ["user-modules-data"]
__requires__ = ["enzymes-txt"]
__description__ = ("This script generates a user-defined modules file from a tab-delimited file of enzymes and other input parameters.")

run = terminal.Run()
progress = terminal.Progress()

def main(args):
    pass


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    parser.add_argument(*anvio.A('enzymes-txt'), **anvio.K('enzymes-txt'))
    parser.add_argument(*anvio.A('module-entry'), **anvio.K('module-entry'))
    parser.add_argument(*anvio.A('module-name'), **anvio.K('module-name'))
    parser.add_argument(*anvio.A('module-definition'), **anvio.K('module-definition'))
    parser.add_argument(*anvio.A('module-class'), **anvio.K('module-class'))

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
