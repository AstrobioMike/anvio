#!/usr/bin/env python
# -*- coding: utf-8
"""
Citations: doi:10.1126/science.aaz9642, doi:10.1038/nature11711
"""

import os
import sys

import numpy as np
import pandas as pd

import anvio

import anvio.dbops as dbops
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.constants as constants
import anvio.filesnpaths as filesnpaths

from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError
from anvio.variabilityops import VariabilityData


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Evan Kiefl"
__email__ = "kiefl.evan@gmail.com"
__provides__ = ['pn-ps-data']
__requires__ = ['contigs-db', 'variability-profile-txt']
__description__ = ("FIXME")


progress = terminal.Progress()
run = terminal.Run()


def load_variability(args, contigs_db):
    progress.new('Loading SCVs')
    progress.update('...')

    var = VariabilityData(args)

    # filter by departure_from_consensus
    var.filter_data(criterion='departure_from_consensus', verbose=False)

    # filter by departure_from_consensus
    var.filter_data(criterion='coverage', verbose=False)

    # identify gene calls that are noncoding
    gene_caller_ids_for_noncoding_gene_calls = [g for g in var.data['corresponding_gene_call'].unique()
                                                if contigs_db.genes_in_contigs_dict[g]['call_type'] != constants.gene_call_types['CODING']]
    if gene_caller_ids_for_noncoding_gene_calls:
        # This should never happen with >v6.2
        var.data.drop(var.data[var.data['corresponding_gene_call'].isin(gene_caller_ids_for_noncoding_gene_calls)].index, inplace=True)

        progress.reset()
        run.warning("%d of your gene calls were 'noncoding', and were removed from downstream analyses. Here is the complete list of "
                    "gene calls that were removed: '%s'." % (len(gene_caller_ids_for_noncoding_gene_calls), ', '.join([str(g) for g in gene_caller_ids_for_noncoding_gene_calls])))

    progress.end()

    return var.data


def load_contigs_db(args):
    filesnpaths.is_file_exists(args.contigs_db)
    contigs_db = dbops.ContigsSuperclass(args, r=terminal.Run(verbose=False), p=terminal.Progress(verbose=False))
    contigs_db.init_contig_sequences()
    return contigs_db


def report(args, pNpS, pN, pS):
    index_label = "sample_id" if args.no_gene else "gene_callers_id"

    # write it to folder
    pNpS.to_csv(os.path.join(args.output_dir, "pNpS.txt"), sep="\t", index = True, index_label = index_label)
    pN.to_csv(os.path.join(args.output_dir, "pN.txt"), sep="\t", index = True, index_label = index_label)
    pS.to_csv(os.path.join(args.output_dir, "pS.txt"), sep="\t", index = True, index_label = index_label)

    run.info_single("Done! Contents have been output to the directory '{}'.".format(args.output_dir),
                    nl_before=1,
                    nl_after=1)


def calculate_pN_pS_ratio(args):
    # gen output
    filesnpaths.check_output_directory(args.output_dir)
    filesnpaths.gen_output_directory(args.output_dir)

    # load contigs db and variability tables
    contigs_db = load_contigs_db(args)
    df = load_variability(args, contigs_db)

    # only genes and samples that are have at least one SCV are known to the program
    gene_caller_ids = df['corresponding_gene_call'].unique()
    samples = df['sample_id'].unique()

    # Do the thing here

    if args.no_gene:
        # We are going to aggregate all the per-gene results
        codon_list = []
        for i, gene_callers_id in enumerate(gene_caller_ids):
            gene_call = contigs_db.genes_in_contigs_dict[gene_callers_id]
            codon_list.extend(utils.get_list_of_codons_for_gene_call(gene_call, contigs_db.contig_sequences))

        syn_potential, non_syn_potential, total_ambiguous_codons = utils.get_synonymous_and_non_synonymous_potential(codon_list, just_do_it=True)
        potential_synonymity_ratio = syn_potential / non_syn_potential
    else:
        # calc potential synonymity for each gene
        potential_synonymity_ratio = np.zeros(len(gene_caller_ids))
        total_ambiguous_codons = 0
        for i, gene_callers_id in enumerate(gene_caller_ids):
            gene_call = contigs_db.genes_in_contigs_dict[gene_callers_id]

            codon_list_for_gene = utils.get_list_of_codons_for_gene_call(gene_call, contigs_db.contig_sequences)
            syn_potential, non_syn_potential, num_ambiguous_codons = utils.get_synonymous_and_non_synonymous_potential(codon_list_for_gene)

            # we are adding the number of codons in this gene that were not included
            # in the calculations above as they included ambiguous nucleotides
            total_ambiguous_codons += num_ambiguous_codons

            potential_synonymity_ratio[i] = syn_potential / non_syn_potential

    if total_ambiguous_codons:
        run.warning("Please note that %d codons among your %d genes included nucleotides "
                    "that were not unambiguous (i.e., 'N's or any other bases than A, T, "
                    "C, or G) and were excluded from synonymity calculations." % (total_ambiguous_codons, len(gene_caller_ids)))

    pNpS = pd.DataFrame({})
    pN = pd.DataFrame({})
    pS = pd.DataFrame({})

    report(args, pNpS, pN, pS)


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupV = parser.add_argument_group('VARIABILITY', 'Provide a SCV table that can be generated with anvi-gen-variability-profile.')
    groupV.add_argument('-V', '--variability-profile', help='Filepath to the SCV table.', metavar='SCV_FILE')
    groupV.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'help':'Filepath to the contigs database used \
                                                      to generate variability table.'}))

    groupE = parser.add_argument_group('TUNABLES', "Successfully tune one or more of these parameters to unlock the badge 'Advanced anvian'.")
    groupE.add_argument(*anvio.A('min-departure-from-consensus'), **anvio.K('min-departure-from-consensus', {'default': 0.1, 'help': \
                            'SCVs will be ignored if they have a departure from consensus less than this \
                            value. Note: Keep in mind you may have already supplied this parameter during anvi-gen-variability-profile.\
                            The default value is %(default).2f.'}))
    groupE.add_argument('-i', '--minimum-num-variants', default=4, type=int, required=False, help='Ignore genes with less than this number\
                            of single codon variants. FIXME')
    groupE.add_argument('-m', '--min-coverage', default=30, type=int, required=False, help='If the coverage value at a codon is less than \
                            this amount, any associated SCVs will be ignored. The default is %(default)d.')

    groupO = parser.add_argument_group('OUTPUT', 'The output of this program is a folder directory with several tables.')
    groupO.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir', {'required':True}))
    groupO.add_argument('--no-gene', action='store_true', help='Normally, a value is provided for each sample-gene combination. '
                        'So if you have 10 genes and 100 samples, you would get 10*100=1000 separate values. If this flag is provided, '
                        'the output is not subdivided on a per-gene basis, and instead you will get 1 aggregated value for each sample.')

    # init variability table as VariabilityData class object
    #args.columns_to_load = ['corresponding_gene_call', 'sample_id', ...] # FIXME fill this out accurately for speedups
    args = parser.get_args(parser)

    try:
        calculate_pN_pS_ratio(args)
    except ConfigError as e:
        print(e)
        sys.exit(1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(1)
