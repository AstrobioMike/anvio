#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys

import anvio
import anvio.kegg as kegg
import anvio.utils as utils

import anvio.terminal as terminal

from anvio.errors import ConfigError,FilesNPathsError
from anvio.genomedescriptions import GenomeDescriptions

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Iva Veseli"
__email__ = "iveseli@uchicago.edu"
__requires__ = ["kegg-metabolism","external-genomes"]
__provides__ = []
__description__ = "An ad-hoc script to analyze KEGG modules from metabolism estimation output"

run = terminal.Run()
progress = terminal.Progress()


## CLASSES AND FUNCTION DEFINITIONS
## Ideally, these will eventually go into a separate file.
class ModuleAnalyzer:
    """This class defines functions for analysis of metabolic modules."""

    def __init__(self, args, run=run, progress=progress):
        self.args = args
        self.run = run
        self.progress = progress

        A = lambda x: args.__dict__[x] if x in args.__dict__ else None
        self.external_genomes_file = A('external_genomes') or None

        g = GenomeDescriptions(self.args, run=self.run, progress=self.progress)
        g.load_genomes_descriptions(skip_functions=True, init=False)
        self.genomes = g.genomes

        self.input_paths_sanity_check()


    def input_paths_sanity_check(self):
        """Make sure each genome has a metabolism input file path, and convert to absolute paths if necessary."""

        for genome_name in self.genomes:
            if 'metabolism_output_path' not in self.genomes[genome_name]:
                raise ConfigError(f"Your input file should contain a column called 'metabolism_output_path' "
                                  f"containing paths to metabolism estimation output files for each genome, "
                                  f"buuuut it doesn't, so... see ya.")

            path = self.genomes[genome_name]['metabolism_output_path']
            if not path:
                raise ConfigError(f"Your input file did not contain a path to metabolism output "
                                  f"for genome {genome_name}. Better fix that or this whole thing "
                                  f"won't work.")

            if not path.startswith('/'):
                self.genomes[genome_name]['metabolism_output_path'] = os.path.abspath(os.path.join(os.path.dirname(self.external_genomes_file), path))


    def analyze_modules(self):
        """Driver function for module analysis.

        We go through each genome and process its module estimation output file. Each time we find a new module, we initialize
        a module object to keep track of its data.
        """

        self.modules = {}
        # these expected headers should make sure we are working only with single genome metabolism estimation output files
        expected_headers = kegg.OUTPUT_MODES['modules']['headers'] + ['genome_name']

        for genome in self.genomes:
            modules_file_dict = utils.get_TAB_delimited_file_as_dictionary(self.genomes[genome]['metabolism_output_path'], expected_fields=expected_headers)

## END CLASSES AND FUNCTION DEFINITIONS
## Script driver
def main(args):
    """The main driver function for analyzing modules."""

    a = ModuleAnalyzer(args)
    a.analyze_modules()


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupI = parser.add_argument_group('INPUT')
    groupI.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes',
                                {'help': "A TAB-delimited flat text file that lists anvi'o contigs databases. "
                                 "In addition to the standard 'name' and 'contigs_db_path' columns, it must "
                                 "also include a 'metabolism_output_path' column which lists the path to "
                                 "the modules mode output from anvi-estimate-metabolism for this genome."}))

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
