#!/usr/bin/env python
# -*- coding: utf-8

# Copyright (C) 2014, A. Murat Eren
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Please read the COPYING file.

import os
import sys
import argparse
import shutil

from PaPi.sge import SGE
import PaPi.utils

sge_error_txt = """Error: This script requires Sun Grid Engine to be accessible for PhymmBL
       annotation of contigs. It seems you are missing a couple of
       binaries. If you think you do have SGE configured, yet you are
       getting this message, please make sure the programs mentioned in
       the original error message from the SGE module is present in your
       PATH:

            %s

       If you don't have SGE available to you, you still can annotate your
       contigs using PhymmBL output you generated elsewhere. To provide a
       TAB-delimited PhymmBL output file, please see the help menu of this
       script.
"""

sge = SGE()
try:
    sge.check_sge_binaries()
except PaPi.utils.ConfigError, e:
    sys.stderr.write(sge_error_txt % e)
    sys.exit()

parser = argparse.ArgumentParser(description='Taxonomic analysis of contigs')
parser.add_argument('contigs', metavar = 'PATH', default = None,
                    help = 'FASTA formatted contigs file.')
parser.add_argument('-p', '--phymmbl-binary', metavar = 'PATH', default = None,
                    help = 'Phymmbl binary on your system.')

args = parser.parse_args()

run = PaPi.utils.Run()
progress = PaPi.utils.Progress()

PaPi.utils.is_file_exists(args.contigs)

if not args.phymmbl_binary:
    sys.stderr.write("You need to specify the full-path for PhymmBL binary.\n")
    sys.exit(-1) 

PaPi.utils.is_file_exists(args.phymmbl_binary)

tmp_dir = os.path.join(os.path.dirname(PaPi.utils.ABS(args.contigs)), 'tmp')
PaPi.utils.gen_output_directory(tmp_dir, delete_if_exits = True)
parts_dir = os.path.join(tmp_dir, 'parts')
PaPi.utils.gen_output_directory(parts_dir)

run.info('contigs', args.contigs)

sge.input_file_path = args.contigs 
sge.tmp_dir = parts_dir
sge.progress = progress
sge.run = run
sge.input_is_fasta = True
sge.merged_results_file_path = os.path.join(os.path.dirname(PaPi.utils.ABS(args.contigs)), 'PHYMBLL-RAW-OUTPUT.txt')
sge.binary = args.phymmbl_binary
sge.command = 'perl %(binary)s %(part)s'
sge.wild_card_for_partial_results = "results.01.phymm*part-*.txt"

try:
    sge._run()
except PaPi.utils.ConfigError, e:
    print e
    sys.exit(-1)

# SGE is done, output is there .. we suppose.
merged_output = open(sge.merged_results_file_path)

# taxonomy goes like this: [phylum, class, order, family, genus, species]
taxonomy_output = open(os.path.join(os.path.dirname(PaPi.utils.ABS(args.contigs)), 'TAXONOMY.txt'), 'w')

taxonomy_output.write('splits\tphylum\tclass\torder\tfamily\tgenus\tspecies\n')
for line in merged_output.readlines():
    fields = line.strip('\n').split('\t')
    if fields[0] == 'QUERY_ID':
        continue

    taxonomy_output.write('%s\n' % '\t'.join([fields[0], fields[7], fields[6], fields[5], fields[4], fields[3], fields[1]]))
taxonomy_output.close()

shutil.rmtree(sge.tmp_dir)
