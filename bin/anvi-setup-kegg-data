#!/usr/bin/env python
# -*- coding: utf-8

import sys
import argparse

import anvio
import anvio.kegg as kegg
import anvio.biochemistry.refdbs as refdbs

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program
from anvio.ttycolors import color_text as c

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2023, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva', 'semiller10']
__provides__ = ["kegg-data", "modules-db"]
__description__ = "Download and setup various databases from KEGG"

## AVAILABLE DOWNLOAD MODES (and their parameters)
DOWNLOAD_MODES = {'KOfam': {'description': 'only KOfam annotation models (HMMs)',
                            'arguments': {'only-download': {'flags': anvio.A('only-download'),
                                                           'definition': anvio.K('only-download')},
                                          'only-database': {'flags': anvio.A('only-database'),
                                                           'definition': anvio.K('only-database')}
                                          }
                            },
                'modules': {'description': 'KOfam + pathways from the KEGG MODULES database',
                            'arguments': {'kegg-snapshot': {'flags': anvio.A('kegg-snapshot'),
                                                            'definition': anvio.K('kegg-snapshot')},
                                          'download-from-kegg': {'flags': anvio.A('download-from-kegg'),
                                                            'definition': anvio.K('download-from-kegg')},
                                          'only-download': {'flags': anvio.A('only-download'),
                                                            'definition': anvio.K('only-download')},
                                          'only-database': {'flags': anvio.A('only-database'),
                                                            'definition': anvio.K('only-database')},
                                          'skip-brite-hierarchies': {'flags': anvio.A('skip-brite-hierarchies'),
                                                            'definition': anvio.K('skip-brite-hierarchies')},
                                          'overwrite-output-destinations': {'flags': anvio.A('overwrite-output-destinations'),
                                                            'definition': anvio.K('overwrite-output-destinations',
                                                                {'help': "Overwrite any existing modules database "
                                                                            "in the KEGG data directory "
                                                                            "[USE WITH CAUTION]. Only relevant if you "
                                                                            "are using the --only-database flag"})},
                                          'kegg-archive': {'flags': anvio.A('kegg-archive'),
                                                            'definition': anvio.K('kegg-archive')}
                                        }
                            },
                'modeling': {'description': 'Orthologs and reactions for metabolic modeling',
                            'arguments': {'dir': {'flags': ['--dir'],
                                            'definition': {'default': refdbs.ProteinReferenceDatabase.default_superdir, 
                                                    'type': str,
                                                    'help': "Directory in which a new subdirectory with the name "
                                                            "of the database (e.g., 'kegg', 'modelseed') is created "
                                                            "containing database files."}}
                                        },
                }
}


@time_program
def main(args, unknown_args):

    # Here we parse mode-specific parameters that aren't recognized by the parent parser
    mode = args.mode
    mode_args, mode_unknown = subparsers[mode].parse_known_args(unknown_args)
    args = argparse.Namespace(**vars(args), **vars(mode_args))
    if len(mode_unknown):
        raise ConfigError("Unrecognized parameters %s" % ' '.join(sub_unknown))

    if mode == "KOfam":
        args.download_from_kegg = True
        setup = kegg.KOfamDownload(args)
        setup.setup_kofams()
    if mode == "modules":
        setup = kegg.ModulesDownload(args)
        setup.setup_modules_data()
    if mode == "modeling":
        args.db = 'KEGG'
        db = refdbs.KEGGDatabase(args.dir, args.num_threads)
        db.download(reset=args.reset)

if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    show_help = ('--help' in sys.argv) or ('-h' in sys.argv)

    groupM = parser.add_argument_group('MODE', "Select which data you want to download.")
    groupM.add_argument('--mode', choices=DOWNLOAD_MODES.keys(), 
                        help="Depending on your choice here, this program will download and set up "
                             "certain subsets of the data available from KEGG. "
                             "KOfam - only KOfam annotation models (HMMs)."
                             "modules - KOfam + pathways from the KEGG MODULES database."
                             "modeling - Orthologs and reactions for metabolic modeling.")

    # common arguments
    groupE = parser.add_argument_group('COMMON PARAMETERS', "These parameters apply to any mode.")
    groupE.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir'))
    groupE.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupE.add_argument(*anvio.A('reset'), **anvio.K('reset'))
    groupE.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))


    if show_help:
        parser.print_help()

    
    subparsers = {}
    for mode, info_dict in DOWNLOAD_MODES.items():
        subparser = argparse.ArgumentParser(usage=argparse.SUPPRESS, add_help=False)

        subparser._optionals.title = " \n%s\n%s" % (c(mode.upper(), "green"), ':' * 79)
        for arg_name, arg_dict in info_dict['arguments'].items():
            subparser.add_argument(*arg_dict['flags'], **arg_dict['definition'])

        if show_help:
            subparser.print_help()
    
        subparsers[mode] = subparser


    if show_help:
        sys.exit()

    args, unknown_args = parser.parse_known_args()

    try:
        main(args, unknown_args)

    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
