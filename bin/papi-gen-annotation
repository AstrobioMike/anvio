#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2014, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""
import sys
import argparse

import PaPi.parsers as parsers
from PaPi.utils import ConfigError
from PaPi.filesnpaths import FilesNPathsError

parser = argparse.ArgumentParser(description='Generate a PaPi annotation database using available parsers for \
                                              various annotation sources.')
parser.add_argument('input', metavar = 'FILE', nargs='+',
                    help = 'Input files')
parser.add_argument('-f', '--contigs', metavar = 'FASTA', default = None,
                    help = 'The FASTA file that contains reference sequences you mapped your samples against. This\
                            could be a reference genome, or contigs from your assembler. Contig names in this file\
                            must match to those in other input files. If there is a problem, PaPi will gracefully\
                            complain about it.')
parser.add_argument('-p', '--parser', default = 'myrast_cmdline',
                    help = 'Parser to make sense of the input files. There are %d parsers readily available: %s.\
                            The default is "%s". Please see the documentation, or get in touch with the developers\
                            if you have any questions regarding parsers.' % (len(parsers.parsers.keys()),
                                                                             ', '.join(parsers.parsers.keys()),
                                                                             'myrast_cmdline'))
parser.add_argument('-L', '--split-length', metavar = 'INTEGER', default = 20000, type=int,
                    help = 'Splitting very large contigs into multiple pieces improves\
                            the efficacy of the visualization step. The default value\
                            is (%(default)d). The split size must be identical between the profiled samples\
                            and the annotation db.')
parser.add_argument('-o', '--output-prefix', default = "ANNOTATION", 
                    help = 'Output file prefix. Default prefix is "%(default)s.')

args = parser.parse_args()

try:
    if args.parser not in parsers.parsers:
        raise ConfigError, "I don't know what to do with '%s'. Please enter a valid parser. Here is a list of\
                            parsers available: %s" % (args.parser, ','.join(parsers.parsers))
    if not args.contigs:
        raise ConfigError, "This is not going to work without a FASTA file with contigs. Please see the help menu :/"
    parser = parsers.parsers[args.parser](args.contigs, args.input, args.output_prefix, args.split_length)
except ConfigError, e:
    print e
    sys.exit(-1)
except FilesNPathsError, e:
    print e
    sys.exit(-2)