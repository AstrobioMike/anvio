#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2015, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""

import os
import sys

import PaPi.annotation as annotation

from PaPi.parsers import parser_modules
from PaPi.utils import ConfigError
from PaPi.filesnpaths import FilesNPathsError


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Generate a PaPi annotation database using available parsers for \
                                                  various annotation and search resources.')
    parser.add_argument('-f', '--contigs-fasta', metavar = 'FASTA', default = None,
                        help = 'The FASTA file that contains reference sequences you mapped your samples against. This\
                                could be a reference genome, or contigs from your assembler. Contig names in this file\
                                must match to those in other input files. If there is a problem, PaPi will gracefully\
                                complain about it.')
    parser.add_argument('-p', '--parser', default = 'default_matrix',
                        help = 'Parser to make sense of the input files. There are %d parsers readily available: %s.\
                                It is OK if you do not select a parser, but in that case there will be no additional\
                                annotation available except the identification of single-copy genes in your contigs\
                                for later use. Using a parser will not prevent the analysis of single-copy genes,\
                                but make PaPi more powerful to help you make sense of your results. Please see the\
                                documentation, or get in touch with the developers if you have any questions\
                                regarding parsers.' % (len(parser_modules['annotation']), parser_modules['annotation'].keys()))
    parser.add_argument('input_files', metavar = 'FILE', nargs='+', default = None,
                        help = 'Input file(s) for selected parser. Each parser (except "blank") requires input files to\
                                process that you generate before running PaPi. Please see the documentation for details.')
    parser.add_argument('-L', '--split-length', metavar = 'INTEGER', default = 20000, type=int,
                        help = 'Splitting very large contigs into multiple pieces improves\
                                the efficacy of the visualization step. The default value\
                                is (%(default)d). The split size must be identical between the profiled samples\
                                and the annotation db.')
    parser.add_argument('-S', '--skip-search-tables', action='store_true', default = False,
                        help = 'PaPi scans available HMM profiles to identify matching contigs for each database, and\
                                generate tables for search results coming from each of them. This flag is to skip that\
                                step.')
    parser.add_argument('-o', '--output', default = "ANNOTATION.db", 
                        help = 'Output file for the database.')
    parser.add_argument('--debug', action='store_true', default = False,
                        help = 'When declared, PaPi will not remove temporary directories with intermediate search\
                                results that may be useful to investigate unexpected behavior.')

    args = parser.parse_args()

    try:
        g = annotation.GenAnnotationDB(args)
        g._run()
    except ConfigError, e:
        print e
        sys.exit(-1)
    except FilesNPathsError, e:
        print e
        sys.exit(-2)