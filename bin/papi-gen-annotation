#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2014, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""

import os
import sys
import argparse

import PaPi.parsers as parsers
import PaPi.annotation as annotation

from PaPi.utils import ConfigError
from PaPi.filesnpaths import FilesNPathsError


parser = argparse.ArgumentParser(description='Generate a PaPi annotation database using available parsers for \
                                              various annotation sources.')
parser.add_argument('-f', '--contigs', metavar = 'FASTA', default = None,
                    help = 'The FASTA file that contains reference sequences you mapped your samples against. This\
                            could be a reference genome, or contigs from your assembler. Contig names in this file\
                            must match to those in other input files. If there is a problem, PaPi will gracefully\
                            complain about it.')
parser.add_argument('-p', '--parser', default = None,
                    help = 'Parser to make sense of the input files. There are %d parsers readily available: %s.\
                            It is OK if you do not select a parser, but in that case there will be no additional\
                            annotation available except the identification of single-copy genes in your contigs\
                            for later use. Using a parser will not prevent the analysis of single-copy genes,\
                            but make PaPi more powerful to help you make sense of your results. Please see the\
                            documentation, or get in touch with the developers if you have any questions\
                            regarding parsers.' % (len(parsers.available_parsers), parsers.available_parsers))
parser.add_argument('-i', '--input-files', metavar = 'FILE', nargs='+', default = None,
                    help = 'Input files for selected parser. Each parser (except "blank") requires input files to\
                            process that you generate before running PaPi. Please see the documentation for details.')
parser.add_argument('-L', '--split-length', metavar = 'INTEGER', default = 20000, type=int,
                    help = 'Splitting very large contigs into multiple pieces improves\
                            the efficacy of the visualization step. The default value\
                            is (%(default)d). The split size must be identical between the profiled samples\
                            and the annotation db.')
parser.add_argument('-S', '--skip-hmm-profiling', action='store_true', default = False,
                    help = 'PaPi scans available HMM profiles to identify matching contigs for each database. This\
                            step can be skipped by declaring this flag')
parser.add_argument('-o', '--output', default = "ANNOTATION.db", 
                    help = 'Output file prefix (it could contain a directory path). Default prefix is "%(default)s.')

args = parser.parse_args()

try:
    if args.skip_hmm_profiling and not args.parser:
        raise ConfigError, "OK. You are using a blank parser, and you want to skip HMM profiling step. Well,\
                            there is nothing else this script offers. Bye!"
    if type(args.parser) != type(None) and args.parser not in parsers.available_parsers:
        raise ConfigError, "I don't know what to do with '%s'. Please enter a valid parser. Here is a list of\
                            parsers available: %s" % (args.parser, ', '.join(parsers.available_parsers))

    if type(args.parser) == type(None) and args.input_files:
        raise ConfigError, "You can't list --input-files with your parser is 'blank'. You know why? Because that parser\
                            does not want any input files."

    if not args.contigs:
        raise ConfigError, "This is not going to work without a FASTA file of contigs. Please see the help menu :/"

    if os.path.isdir(args.output):
        args.output = os.path.join(args.output, 'ANNOTATION.db')

    if not args.output.lower().endswith('.db'):
        raise ConfigError, "Please make sure your output file name has a '.db' extension. PaPi developers apologize\
                            for imposing their views on how local databases should be named, and are humbled by your\
                            cooperation."

    # We are doing it:
    parser = parsers.parser_modules[args.parser](args.contigs, args.input_files, annotation.annotation_table_structure)
    annotations_dict = parser.get_annotations_dict()

    annotation_db = annotation.Annotation(args.output)
    annotation_db.create_new_database(args.contigs, annotations_dict, args.split_length, args.parser, args.skip_hmm_profiling)



except ConfigError, e:
    print e
    sys.exit(-1)
except FilesNPathsError, e:
    print e
    sys.exit(-2)