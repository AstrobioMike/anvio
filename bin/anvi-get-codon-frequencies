#!/usr/bin/env python
# -*- coding: utf-8
"""Return frequencies of amino acids in a gene

   Takes a bunch of BAM files, and a unique gene caller ID to count
   AA linkmer frequencies"""

import sys

from collections import Counter

import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.constants as constants
import anvio.filesnpaths as filesnpaths

from anvio.errors import ConfigError, FilesNPathsError
from anvio.dbops import ContigsSuperclass


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['meren']
__requires__ = ['contigs-db']
__provides__ = ['codon-frequencies-txt', 'aa-frequencies-txt',]
__description__ = ("Get amino acid or codon frequencies of genes in a contigs database")


class ReportCodonFrequencies:
    def __init__(self, args, run=terminal.Run(), progress=terminal.Progress()):
        self.args = args
        self.run = run
        self.progress = progress

        A = lambda x: args.__dict__[x] if x in args.__dict__ else None
        self.bam_file_path = A('bam_file')
        self.gene_caller_id = A('gene_caller_id')
        self.return_AA_frequencies_instead = A('return_AA_frequencies_instead')
        self.percent_normalize = A('percent_normalize')
        self.merens_codon_normalization = A('merens_codon_normalization')
        self.collapse_genes = A('collapse_genes')
        self.codon_usage_bias = A('codon_usage_bias')
        self.kofam_groups = A('kofam_groups')
        self.omnibias = A('omnibias')
        self.output_file_path = A('output_file')

        filesnpaths.is_output_file_writable(self.output_file_path)

        if self.merens_codon_normalization and self.percent_normalize:
            raise ConfigError("You can't use both `--merens-codon-normalization` and `--percent-normalize`. Please "
                              "read the help menu and pick one (you will get bonus points if you pick meren's "
                              "normalization because why not)")

        if self.merens_codon_normalization and self.return_AA_frequencies_instead:
            raise ConfigError("The flag `--merens-codon-normalization` is only relevant if you are working with codon "
                              "frequencies :/")

        if self.codon_usage_bias and (self.return_AA_frequencies_instead or self.percent_normalize
                                      or self.merens_codon_normalization or self.collapse_genes
                                      or self.gene_caller_id):
                raise ConfigError("You can't use `--codon-usage-bias` with codon/AA frequency options "
                                  "or a single gene caller ID:/")

        if (self.kofam_groups or self.omnibias) and not self.codon_usage_bias:
            raise ConfigError("The options `kofam-groups` and `omnibias` are only relevant "
                              "if you are working with codon usage bias :/")

        self.c = ContigsSuperclass(args)

        self.gene_caller_ids = set([])
        if self.gene_caller_id:
            if self.gene_caller_id not in self.c.genes_in_contigs_dict:
                raise ConfigError("Your contigs database named '%s' does not know anything about the gene caller id "
                                  "'%s' :/" % (self.c.a_meta['project_name'], str(self.gene_caller_id)))
            else:
                self.gene_caller_ids = [self.gene_caller_id]
        else:
            self.gene_caller_ids = set(self.c.genes_in_contigs_dict.keys())

        if self.return_AA_frequencies_instead:
            self.items = sorted(list(set(constants.codon_to_AA.values())))
        else:
            self.items = []
            for amino_acid in constants.AA_to_codons:
                self.items.extend(constants.AA_to_codons[amino_acid])

        self.item_name_conversion_dict = None

        if self.codon_usage_bias:
            pass
        else:
            self.process()


    def process(self):
        if self.gene_caller_id:
            self.c.init_contig_sequences(gene_caller_ids_of_interest=self.gene_caller_ids)
        else:
            self.c.init_contig_sequences()

        noncoding_genes_skipped = set([])
        residue_frequencies = {}
        if self.collapse_genes:
            residue_frequencies['all'] = Counter()

        F = utils.get_list_of_AAs_for_gene_call if self.return_AA_frequencies_instead else utils.get_list_of_codons_for_gene_call

        for gene_callers_id in self.gene_caller_ids:
            gene_call = self.c.genes_in_contigs_dict[gene_callers_id]

            if gene_call['call_type'] != constants.gene_call_types['CODING']:
                noncoding_genes_skipped.add(gene_callers_id)
                continue

            gene_counts = Counter(F(gene_call, self.c.contig_sequences))
            if self.collapse_genes:
                residue_frequencies['all'] += gene_counts
            else:
                residue_frequencies[gene_callers_id] = gene_counts


        if self.percent_normalize:
            for gene_callers_id in residue_frequencies:
                total = sum(residue_frequencies[gene_callers_id].values())
                residue_frequencies[gene_callers_id] = Counter(dict([(r, round(residue_frequencies[gene_callers_id][r] * 100.0 / total, 3)) \
                                                                                    for r in residue_frequencies[gene_callers_id]]))
        elif self.merens_codon_normalization:
            codons_used = set([])
            for gene_callers_id in residue_frequencies:
                for amino_acid in constants.AA_to_codons:
                    codons_of_interest = constants.AA_to_codons[amino_acid]
                    codons_of_interest_total = sum([residue_frequencies[gene_callers_id][r] for r in constants.AA_to_codons[amino_acid]])

                    for codon in codons_of_interest:
                        codons_used.add(codon)
                        if codons_of_interest_total:
                            residue_frequencies[gene_callers_id][codon] = round(residue_frequencies[gene_callers_id][codon] * 100.0 / codons_of_interest_total, 3)

            self.item_name_conversion_dict = dict([(codon, '%s-%s' % (constants.codon_to_AA[codon], codon)) for codon in codons_used])


        if len(noncoding_genes_skipped):
            self.run.warning("%d of %d genes were skipped and will not be in the final report since they were "
                            "'noncoding' gene calls." % (len(noncoding_genes_skipped), len(self.gene_caller_ids)))

        if not len(residue_frequencies):
            raise ConfigError("Anvi'o has no residue frequencies to work with :(")

        utils.store_dict_as_TAB_delimited_file(residue_frequencies,
                                               self.output_file_path,
                                               headers=['gene_callers_id'] + self.items,
                                               header_item_conversion_dict=self.item_name_conversion_dict)

        self.run.info('Output file', self.output_file_path)


if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('INPUT DATABASE', 'The contigs database. Clearly those genes must be read from somewhere.')
    groupA.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db'))

    groupC = parser.add_argument_group('OPTIONALS', "Important things to read never end. Stupid science.")
    groupC.add_argument(*anvio.A('gene-caller-id'), **anvio.K('gene-caller-id', {'help': "OK. You can declare a single gene caller ID if you wish, in\
                                                                which case anvi'o would only return results for a single gene call. If you don't declare\
                                                                anything, well, you must be prepared to brace yourself if you are working with a very\
                                                                large contigs database with hundreds of thousands of genes."}))
    groupC.add_argument('--collapse-genes', default=False, action="store_true", help="By default, codon frequencies are reported on a per-gene basis, meaning "
                                                                                     "that a frequency is reported for each gene-codon pairing. If you provide "
                                                                                     "this flag, codon frequencies will instead be collapsed across genes, "
                                                                                     "such that a single frequency is reported for each codon.")

    groupC.add_argument(*anvio.A('return-AA-frequencies-instead'), **anvio.K('return-AA-frequencies-instead'))
    groupC.add_argument(*anvio.A('output-file'), **anvio.K('output-file', {'required': True}))


    groupC.add_argument('--percent-normalize', default=False, action="store_true", help = "Instead of actual counts, report percent-normalized\
                                                                frequencies per gene (because you are too lazy to do things the proper way in R).")
    groupC.add_argument('--merens-codon-normalization', default=False, action="store_true", help = "This is a flag to percent normalize codon frequenies within those\
                                                                that encode for the same amino acid. It is different from the flag --percent-normalize, since it\
                                                                does not percent normalize frequencies of codons within a gene based on all codon frequencies. Clearly\
                                                                this flag is not applicable if you wish to work with boring amino acids. WHO WORKS WITH AMINO ACIDS\
                                                                ANYWAYS.")

    groupC.add_argument('--codon-usage-bias', choices=['cai', 'delta'], help="Report a single codon usage bias metric instead of absolute or relative codon frequencies.\
                                                                              The chosen metric may require a reference sequence set, which by default is the set of\
                                                                              ribosomal proteins predicted by KEGG KOfams. So don't be surprised by an angry error\
                                                                              that you need to run `anvi-run-kegg-kofams` on your contigs database.\
                                                                              CAI is the codon adaptation index of Sharp and Li (1987).\
                                                                              Delta is the likelihood ratio of Ran and Higgs (2012).")
    groupC.add_argument('--kofam-groups', help="Rather than reporting a codon usage metric per gene, report CUB from sets of genes defined by KEGG KOfams.\
                                                For example, you may wish to compare the overall CUB of genes in different KEGG modules to the ribosomal protein reference.\
                                                Provide a tab-delimited text file with two columns (no header). In the first column is a list of KOfam IDs\
                                                and in the second is a list of group names, e.g., KEGG module IDs or group names/IDs that you invent.\
                                                A KOfam ID may be in more than one row, since a gene may be part of multiple groups.")
    groupC.add_argument('--omnibias', default=False, action="store_true", help="Rather than calculating codon usage bias against the default reference of ribosomal proteins,\
                                                                                calculate CUB of every gene or group of genes against every other reference,\
                                                                                producing a diagonal matrix of CUB values for every combination. A warning will be raised\
                                                                                suggesting that you abort mission if you have not used `--kofam-groups`,\
                                                                                since comparing the codon usage of every gene seems pretty weird.")

    args = parser.get_args(parser)

    try:
        ReportCodonFrequencies(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
