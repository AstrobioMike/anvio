#!/usr/bin/env python
# -*- coding: utf-8

import sys

import anvio
import anvio.inversions as inversions

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program, Run

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2021, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['meren', 'FlorianTrigodet', 'ekiefl']
__requires__ = ["bams-and-profiles-txt"]
__provides__ = ["inversions-txt"]
__description__ = "Reports inversions"

run = Run()

@time_program
def main(args):
    I = inversions.Inversions(args)
    I.process()
    I.report()

if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    group0 = parser.add_argument_group('WHO ARE YOU?', "Are you a part of our very secret group? FIND OUT HERE!.")
    group0.add_argument('--my-name-is', default='anyone', metavar="YOUR NAME", help="What is your name?", required=True)

    groupA = parser.add_argument_group('INPUT DATA', "Essentially a BAMs and profiles file and nothing more.")
    groupA.add_argument(*anvio.A('bams-and-profiles'), **anvio.K('bams-and-profiles'))

    groupB = parser.add_argument_group('KEY ALGORITHMIC COMPONENT 01: IDENTIFYING REGIONS OF INTERSET', "How should anvi'o identify regions of interest "
                    "based on REV/REV and FWD/FWD paired-end reads? Defaults will be good for most cases.")
    groupB.add_argument('--min-coverage-to-define-stretches', default=10, type=int, help="Value to break up contigs into 'stretches' of "
                    "high-coverage regions of FWD/FWD and REV/REV reads. The lower the value, the more noise. This acts as a low-pass "
                    "filter if it helps you imagine how it works.", metavar="INT")
    groupB.add_argument('--min-stretch-length', default=50, type=int, help="These are not the stretches you are looking for (unless they "
                    "are longer than this, obv).", metavar="INT")
    groupB.add_argument('--min-distance-between-independent-stretches', default=2000, type=int, help="Our 'low pass' filter may break a "
                    "single stretch of reasonable coverage of FWD/FWD and REV/REV reads into multiple pieces. To recover from that, we "
                    "wish to merge the fragmented ones if they are closer to one another than this value.", metavar="INT")
    groupB.add_argument('--num-nts-to-pad-a-stretch', default=100, type=int, help="Some leeway towards upstream and downstream context "
                    "that is essential to not miss key information due to coverage variation that may influence the beginnings and ends "
                    "of final stretches.", metavar="INT")

    groupC = parser.add_argument_group('KEY ALGORITHMIC COMPONENT 02: FINDING PALINDROMES', "Some essential parameters to find palindromes in sequence "
                    "stretches anvi'o identified in the previous step")
    groupC.add_argument(*anvio.A('min-palindrome-length'), **anvio.K('min-palindrome-length'))
    groupC.add_argument(*anvio.A('max-num-mismatches'), **anvio.K('max-num-mismatches'))
    groupC.add_argument(*anvio.A('min-distance'), **anvio.K('min-distance'))
    groupC.add_argument(*anvio.A('min-mismatch-distance-to-first-base'), **anvio.K('min-mismatch-distance-to-first-base'))
    groupC.add_argument(*anvio.A('palindrome-search-algorithm'), **anvio.K('palindrome-search-algorithm'))

    groupD = parser.add_argument_group('KEY ALGORITHMIC COMPONENT 03: CONFIRMING INVERSIONS', "Which palindromes are inversions? A one million dollar "
                    "question that is quite difficult to get right (but as anvi'o does get it right frequently).")
    groupD.add_argument('--check-all-palindromes', default=False, action="store_true", help="In a given 'stretch' "
                    "anvi'o has identified as a region of interest due to the coverage of FWD/FWD and REV/REV reads "
                    "(see KEY ALGORITHMIC COMPONENT 01), there may be multiple palindromic sequences. By default, "
                    "anvi'o will stop its search as soon as it finds evidence among short reads in the BAM file "
                    "that suggests a given palindrome represents an active inversion, WITHOUT testing any of the "
                    "remaining palindromes in the same region. While this strategy is extremely efficient as it "
                    "will not go through all reads over and over again for each palindrome, it will miss if there "
                    "are multiple inversions in a single stretch, which is extremely unlikely. But using this this "
                    "you can instruct anvi'o to test ALL palindromes in a stretch. We understand -- we are "
                    "unreasonable people, too.")
    groupD.add_argument('--process-only-inverted-reads', default=False, action="store_true", help="At one point, "
                    "anvi'o will have all the regions of interest in contigs that include palindromes that look "
                    "promising. At that point, it will access to short reads in the BAM file to determine which "
                    "palindromes in fact represent active inversions by searching for unique constructs that "
                    "can only occur when a genomic region did funny things. One option is to search for such "
                    "reads that are evidence of inversion activity among paired-end reads that are in FWD/FWD "
                    "or REV/REV orientation. Which is defined by the fetch-filter 'inversions'. However, this "
                    "may be too limiting as there may be paired-end reads that are too downstream or too upstream "
                    "to the region of interest, and thus mapping FWD/REV or REV/FWD orientation just like every "
                    "other non-rebellious paired end read, YET including one of the constructs. Thus, searching "
                    "all reads may in fact help the identification of more inversions (especially those that are "
                    "covered less), with only an added disadvantage of compute time, which should be negligible "
                    "in almost all instances (since anvi'o at this stage is only focusing on very specific "
                    "regions of genomes). But this parameter is here in case you insist on only using inverted "
                    "paired-end reads and assert your authority. You do you and turn on the flag, you rebellious "
                    "scientist who will likely miss a lot of additoinal inversions like a boss.")

    groupE = parser.add_argument_group('KEY ALGORITHMIC COMPONENT 04: CALCULATING INVERSION RATIOS', "What is the proportion of ON/OFF states across "
                    "samples? A two million dollars question that anvi'o will answer for you IF you have `r1` and `r2` "
                    "columns in your `bams-and-profiles-txt` file that points to raw FASTQ reads you have used to "
                    "generate your BAM files for each sample. Truly cray stuff.")
    groupE.add_argument('--oligo-primer-base-length', default=12, type=int, help="Calculating inversion ratios "
                    "require anvi'o to 'design' an in silico primer based on palindromes associated with inersions "
                    "and the upstream/downstream genomic context to search for short reads in raw sequenicng data"
                    "to find the ratio of inversion activity per sample. This variable is to control how much of "
                    "the palindrome for a given inversion should be used to build a primer to search for short "
                    "reads. The longer it is, the more specific the primers will be to survey short reads. But if "
                    "if it is too long, then there will not be enough reads to 'keep' depending on the minimum "
                    "short read length of the sequencing. The default value will probably good for the vast "
                    "majority of cases.", metavar="INT")
    groupE.add_argument('--skip-calculate-inversion-ratios', default=False, action="store_true", help="This flag "
                    "will help you skip calculating inversion ratios, which is an extremely costly step, even if "
                    "your `bams-and-profiles-txt` contains `r1` and `r2` entries. It may be a good idea to first "
                    "run the workflow without calculating ratios, take a look at the CONSENSUS file to make sure "
                    "everything looks alright, and then run it without this flag.")


    groupF = parser.add_argument_group('OTHER PARAMETERS OF CONVENIENCE', "For the never satisfied.")
    groupF.add_argument(*anvio.A('verbose'), **anvio.K('verbose'))
    groupF.add_argument('--only-report-from', default=None, type=str, help="This is more of a debugging flag more than anything, and can be "
                    "helpful to work on problematic cases over and over again. To engage this mode, you need to mention a region mentioned in "
                    "in your output file or printouts you see when you use the `--verbose` flag. It will be different from project to project, "
                    "but it should look something like this: CONTIG_NAME_5364768_5365139. When declared, anvi'o will only report data from this "
                    "particular region, and nothing at all if it does not find it in your while processing palindromes.", metavar="REGION_STRING")

    groupG = parser.add_argument_group('OUTPUT DIRECTORY', "Where to put all the output files.")
    groupG.add_argument(*anvio.A('output-dir'), **anvio.K('output-dir'))

    args = parser.get_args(parser)


    try:
        # "'Security from obscurity; I like' --Ron Rivest" --Meren.
        import base64
        if eval(compile(base64.b64decode('bm90IGFyZ3MubXlfbmFtZV9pcy51cHBlcigpIGluIHN0cihiYXNlNjQuYjY0ZGVjb2RlKCdUVVZTUlU1R1RFOVNTVUZPJykp'), '<string>', 'eval')):
            raise ConfigError("This program is not ready for prime-time, and its use is limited to a "
                              "very secret group of people (and anvi'o is VERY SAD to see that you "
                              "are not one of them).")
        else:
            run.info_single('Tired Gandalf: You shall .. pass', mc='green', nl_before=1)

        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
