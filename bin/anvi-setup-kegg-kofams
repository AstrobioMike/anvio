#!/usr/bin/env python
# -*- coding: utf-8

import sys

import anvio
import anvio.kegg as kegg
import anvio.biochemistry.refdbs as refdbs

from anvio.errors import ConfigError, FilesNPathsError
from anvio.terminal import time_program

__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2020, the Meren Lab (http://merenlab.org/)"
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['ivagljiva', 'semiller10']
__provides__ = ["kegg-data", "modules-db"]
__description__ = "Download and setup KEGG KOfam HMM profiles plus KEGG MODULE and KEGG BRITE data"

@time_program
def main(args):

    if args.mode == "modules":
        setup = kegg.KeggSetup(args)
        setup.setup_data()
    if args.mode == "modeling":
        args.db = 'KEGG'
        db = refdbs.KEGGDatabase(args.dir, args.num_threads)
        db.download(reset=args.reset)

if __name__ == '__main__':
    from anvio.argparse import ArgumentParser

    parser = ArgumentParser(description=__description__)

    groupM = parser.add_argument_group('MODE', "Select which data you want to download.")
    groupM.add_argument('--mode', choices=['KOfam','modules','modeling'], 
                        help="Depending on your choice here, this program will download and set up "
                             "certain subsets of the data available from KEGG. "
                             "KOfam - only KOfam annotation models (HMMs)."
                             "modules - KOfam + pathways from the KEGG MODULES database."
                             "modeling - Orthologs and reactions for metabolic modeling.")
    
    # Below are all arguments for downloading KOfams/modules ('modules' mode)
    groupS = parser.add_argument_group('DEFAULT SETUP - KEGG SNAPSHOT', "This program will set up metabolism "
                                       "data from the KEGG resource of databases. By default, it will download "
                                       "the snapshot of KEGG that is associated with the latest release of anvi'o. "
                                       "But if you want a different snapshot, you can specify that. :) ")
    groupS.add_argument(*anvio.A('kegg-snapshot'), **anvio.K('kegg-snapshot'))

    groupD = parser.add_argument_group('DOWNLOAD FROM KEGG WEBSITE', "Choose this option for the most up-to-date "
                                        "version of KEGG data, downloaded using the KEGG API. May fail if KEGG "
                                        "updates its formatting (but if that happens, you can always try the default "
                                        "option).")
    groupD.add_argument(*anvio.A('download-from-kegg'), **anvio.K('download-from-kegg'))
    groupD.add_argument(*anvio.A('only-download'), **anvio.K('only-download'))
    groupD.add_argument(*anvio.A('only-database'), **anvio.K('only-database'))
    groupD.add_argument(*anvio.A('overwrite-output-destinations'), **anvio.K('overwrite-output-destinations',
                                                                                {'help': "Overwrite any existing modules database "
                                                                                         "in the KEGG data directory "
                                                                                         "[USE WITH CAUTION]. Only relevant if you "
                                                                                         "are using the --only-database flag"}))

    groupA = parser.add_argument_group('SETUP FROM KEGG ARCHIVE', "Choose this option if you already have a "
                                        ".tar.gz archive of anvi'o-formatted KEGG data on your computer. We'll "
                                        "setup from this archive instead of downloading one.")
    groupA.add_argument(*anvio.A('kegg-archive'), **anvio.K('kegg-archive'))

    # below are args for downloading orthology/reations ('modeling' mode)
    groupB = parser.add_argument_group('MODELING MODE', "Here are the parameters for downloading data relevant "
                                                        "to metabolic modeling (ie, reaction network generation)")
    groupB.add_argument(
        '--dir', default=refdbs.ProteinReferenceDatabase.default_superdir, type=str,
        help=(
            "Directory in which a new subdirectory with the name of the database (e.g., 'kegg', "
            "'modelseed') is created containing database files."
        )
    )

    # common args
    groupE = parser.add_argument_group('EXTRAS', "Extras for the extra.")
    groupE.add_argument(*anvio.A('kegg-data-dir'), **anvio.K('kegg-data-dir'))
    groupE.add_argument(*anvio.A('skip-brite-hierarchies'), **anvio.K('skip-brite-hierarchies'))
    groupE.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupE.add_argument(*anvio.A('reset'), **anvio.K('reset'))
    groupE.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    args = parser.get_args(parser)

    try:
        main(args)

    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-1)
