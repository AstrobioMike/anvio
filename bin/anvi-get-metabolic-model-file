#!/usr/bin/env python
# -*- coding: utf-8
DESCRIPTION = """This program writes a file of metabolic data for FBA models."""

from sys import exit
from argparse import Namespace

import anvio.proteinorthology.refdbs as refdbs
import anvio.proteinorthology.metabolicmodel as metabolicmodel

from anvio import A, K
from anvio.errors import ConfigError
from anvio import __version__ as VERSION
from anvio.argparse import ArgumentParser


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2023, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = VERSION
__authors__ = ['semiller10']
__requires__ = ['functions']
__provides__ = []
__description__ = DESCRIPTION


def main() -> None:
    args = get_args()
    if args.contigs_db:
        external_genome = metabolicmodel.ExternalGenome(
            args.contigs_db, db_superdir=args.db_superdir
        )
        external_genome.write_cobrapy_json(args.output_file)
    elif args.genomes_storage and args.pan_db:
        pangenome = metabolicmodel.Pangenome(
            args.genomes_storage,
            args.pan_db,
            collection_name=args.collection_name,
            bin_id=args.bin_id,
            db_superdir=args.db_superdir,
            discard_ties=args.discard_ties,
            consensus_threshold=args.consensus_threshold
        )
        pangenome.write_cobrapy_json(args.output_file)

def get_args() -> Namespace:
    parser = ArgumentParser(description=DESCRIPTION)

    groupA = parser.add_argument_group(
        "SINGLE GENOME INPUT",
        "Generate a metabolic model file from an \"external\" genome."
    )
    groupA.add_argument(*A('contigs-db'), **K('contigs-db', {'required': False}))

    groupB = parser.add_argument_group(
        "PANGENOME INPUT",
        "Generate a metabolic model file from a pangenome. 'genomes-storage' and 'pan-db' are "
        "required. Gene clusters can be selected from the pangenome with both 'collection-name' "
        "and 'bin-id'."
    )
    groupB.add_argument(*A('genomes-storage'), **K('genomes-storage'))
    groupB.add_argument(*A('pan-db'), **K('pan-db', {'required': False}))
    groupB.add_argument(*A('collection-name'), **K('collection-name'))
    groupB.add_argument(*A('bin-id'), **K('bin-id'))
    groupB.add_argument(
        '--discard-ties', default=False, action='store_true',
        help=(
            "The protein annotation assigned to the most genes in a gene cluster is imparted to "
            "the cluster itself (also see '--consensus-threshold'). If a cluster has multiple "
            "most-frequent gene annotations, then by default without this flag, one of these "
            "annotations would be chosen arbitrarily for the cluster. With this flag, the cluster "
            "would not be assigned a protein annotation due to the tie."
        )
    )
    groupB.add_argument(
        '--consensus-threshold', default=None, type=float,
        help=(
            "If this argument is provided, then a protein annotation must be assigned to this "
            "minimum proportion of genes in a cluster to be imparted to the cluster itself. "
            "By default, without this argument, the annotation assigned to the most genes becomes "
            "that of the cluster (also see '--discard-ties'). The consensus threshold must be a "
            "number from 0 to 1."
        )
    )

    groupC = parser.add_argument_group("OUTPUT", "Output path of COBRApy JSON file.")
    groupC.add_argument(*A('output-file'), **K('output-file'))

    groupD = parser.add_argument_group("DATABASE", "Protein reference database information.")
    groupD.add_argument(
        '--db-superdir', default=refdbs.ProteinReferenceDatabase.default_superdir, type=str,
        help=(
            "Directory in which database subdirectories (e.g., 'modelseed', 'kegg') are located."
        )
    )

    args = parser.get_args(parser)
    return args

if __name__ == '__main__':
    try:
        main()
    except ConfigError as e:
        print(e)
        exit(-1)
