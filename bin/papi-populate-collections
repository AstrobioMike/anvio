#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2015, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""

import os
import sys

import PaPi.utils as utils
import PaPi.terminal as terminal 
import PaPi.annotation as annotation

from PaPi.utils import ConfigError
from PaPi.parsers import parser_modules
from PaPi.filesnpaths import FilesNPathsError

run = terminal.Run()
progress = terminal.Progress()

def main(args):
    # make sure we have the parser
    if not args.parser:
        raise ConfigError, "You need to choose a parser :/ See the '--help' menu."
    if args.parser not in parser_modules['collections']:
        raise ConfigError, "Error: I don't know what to do with '%s'. You must use one of the available parsers\
                            for clustering of contigs (please see the documentation of you are not sure what is\
                            going on here): %s" % (args.parser, ', '.join(parser_modules['collections']))
    if not args.input_files:
        raise ConfigError, "You need to use '--input-files' parameter to list file(s) that is/are required the\
                            parser you chose. Please see the documentation for details."

    # get the clusters dict.
    parser = parser_modules['collections'][args.parser](args.input_files)
    clusters_dict = parser.get_clusters_dict()

    if not len(clusters_dict):
        raise ConfigError, "Your parser (%s) returned an empty dictionary for your input file. Something must have gone wrong.\
                            Maybe you selected a wrong parser, or the input file format has changed between when this\
                            parser was implemented and now. Either ways, if you have exhausted your ideas for troubleshooting\
                            you should send an e-mail to PaPi developers! Sorry for this!" % (args.parser)

    # then init the annotation database (or create a new one), set/learn the split length.
    annotation_db_path, split_length = annotation.magic_touch(args.annotation_db_path, args.split_length, run, progress)

    contig_lengths = utils.get_read_lengths_from_fasta(args.contigs_fasta)

    collections = annotation.CollectionsTables(annotation_db_path, contig_lengths)
    collections.append(args.parser, clusters_dict)


if __name__ == '__main__':
    available_parsers = parser_modules['collections'].keys()
    num_available_parsers = len(available_parsers)

    import argparse
    parser = argparse.ArgumentParser(description='This program deals with populating collections_* tables in the\
                                                  annotation database. Collections are essentially clusters of contigs.\
                                                  This information can be generated by any binning software (including\
                                                  PaPi itself through the interactive binning process). You can use any\
                                                  genome binning software to identify clusters (or draft genomes) in your\
                                                  metagenome, and incorporate that information with the rest of your\
                                                  analysis on PaPi as long as there is a parser to make sense of the\
                                                  output file(s) generated by teh genome binnign software you used.\
                                                  If yours is not available, please get in touch with the developers, and\
                                                  it will be included in no time. Or you can use the default matrix you\
                                                  manually curate until a native parsers specificly written for your\
                                                  favorite genome binning software is available in PaPi. Please see the\
                                                  documentation for details.')
    parser.add_argument('contigs_fasta', metavar = 'CONTIGS_FASTA',
                        help = 'The FASTA file of your contigs you have used for mapping.')
    parser.add_argument('annotation_db_path', metavar = 'ANNOTATION_DB',
                        help = 'Annotation database to update or create. If the path you provide resolves to an already\
                                existing database, running this program will populate search tables in it. If it is a\
                                new file, a new annotation database will be created with search results alone.')
    parser.add_argument('-L', '--split-length', default = None,
                        help = 'This is not necessary if you are working with an already existing annotation database\
                                since it will have this information (which you can not overwrite). If you are creating\
                                a new database, then this parameter will be in effect.')
    parser.add_argument('-p', '--parser', default = None,
                        help = 'A parser to make sense of the input files. Please consult the documentation if you have\
                                questions regarding parsers, or contact PaPi developers. Currently there %s: %s.' %\
                                    ('are %d parsers' % num_available_parsers if num_available_parsers > 1 else 'is only one parser',
                                    ', '.join(available_parsers)))
    parser.add_argument('-i', '--input-files', metavar = 'FILE(S)', nargs='+', default = None,
                        help = 'Input file(s) for selected parser. Each parser requires one or more input files\
                                generated by you or your genome binnig software. Please see the documentation for details.')


    args = parser.parse_args()

    try:
        main(args)
    except ConfigError, e:
        print e
        sys.exit(-1)
    except FilesNPathsError, e:
        print e
        sys.exit(-2)