#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import json
import yaml
import shlex
import anvio
import subprocess
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.filesnpaths as filesnpaths
from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2018, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['meren', 'metehan']
__requires__ = ['contigs-db', 'profile-db', 'pan-db']
__description__ = ("The purpose of this program is to download the data in the Yaml type file received from the user and run the desired commands.")

run = terminal.Run()
progress = terminal.Progress()

'''
def os_run(cmd):
    cmd = shlex.split(cmd)

    if cmd[0] == 'cd':
        try:
            os.chdir(cmd[1])
            return 0
        except OSError:
            print(str(sys.exc_info()[1]))
            return 1

    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)

    output = proc.communicate()[0]

    return proc.returncode
'''
@terminal.time_program
def main(args):
    """ This function is get yaml file as argument and parse it. Then run the given commands. """
    given_yaml_path = lambda x: args.__dict__[x] if x in args.__dict__ else None
    yaml_file_path = given_yaml_path('yaml')
    #setup_arg = given_yaml_path('setup')
    #init_arg = given_yaml_path('init')
 
    if not yaml_file_path:
        raise ConfigError("You must provide a YAML file path.")
    filesnpaths.is_file_yaml_formatted(yaml_file_path)

    # Open and parse the file

    with open(yaml_file_path, 'r') as yaml_file:
        yaml_data = yaml.safe_load(yaml_file)
    
    # Convert yaml file to json file
    
    json_data = json.loads(json.dumps(yaml_data))

    try:
        project_title = json_data.get('project').get('title')
        project_description = json_data.get('project').get('description')
        project_author_name = json_data.get('author').get('name')
        project_author_email = json_data.get('author').get('email')
        project_author_affiliation = json_data.get('author').get('affiliation')
        project_author_web = json_data.get('author').get('web')
        
        setup = json_data.get('setup')
        setup_command_counter = 0
        
        # Setup commands are run here
        cwd_home = os.getcwd()
        while setup_command_counter < len(setup):
            if 'cd' in setup[setup_command_counter]:
                cwd_file = cwd_home + '/' + setup[setup_command_counter].split(' ')[1]  
                setup_command_counter += 1
                os.chdir(cwd_file)
            else:
                subprocess.run(str(setup[setup_command_counter]), shell=True)
                setup_command_counter += 1
        
        '''
        init = json_data.get('init')
        init_command_counter = 0 

        while init_command_counter < len(init):
            subprocess.call(init[init_command_counter], shell=True)
            init_command_counter += 1
        '''
        run = json_data.get('run')
        run_command_counter = 0

        while run_command_counter < len(run):
            subprocess.call(run[run_command_counter].get('command'), shell=True)
            run_command_counter += 1   
    except:
        raise ConfigError("The YAML file is not in the correct format.")

if __name__ == '__main__': 
    """ This is the main function that is called when the program is run from the command line. """

    parser = ArgumentParser(description=__description__)
    parser.add_argument('-y', '--yaml', help='YAML file containing the commands to be run', required=True)
    parser.add_argument('-s', '--setup', help='Setup the environment for the Anvio', default=None , required=False)
    parser.add_argument('-i', '--init', help='Initialize the project with installed data', default=None ,required=False)

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)