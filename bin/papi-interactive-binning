#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2014, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""

import os
import sys
import json
import base64
import shutil
import argparse
import webbrowser
import datetime

from multiprocessing import Process
from bottle import route, static_file, redirect, request, BaseRequest, response
from bottle import run as run_server
from ete2 import Tree

import PaPi.profiler
import PaPi.utils as utils
import PaPi.filesnpaths as filesnpaths
import PaPi.terminal as terminal
import PaPi.dictio as dictio
import PaPi.fastalib as u
from PaPi.constants import levels_of_taxonomy

# get the absolute path for static directory under PaPi
static_dir = os.path.join(os.path.dirname(u.__file__), 'static/interactive')

parser = argparse.ArgumentParser(description='Start PaPi binning interface')
# FIXME: it should be possible to run this without the runinfo-dict.
parser.add_argument('-r', '--runinfo', metavar = 'PATH', default = None,
                    help = 'RUNINFO.cp file generated by a PaPi profiler')
parser.add_argument('-f', '--fasta-file', metavar = 'FASTA', default = None,
                    help = 'FASTA file of consensus sequences for each split')
parser.add_argument('-m', '--metadata', metavar = 'TXT', default = None,
                    help = 'TAB-delimited metadata file')
parser.add_argument('-t', '--tree', metavar = 'NEWICK', default = None,
                    help = 'Newick tree of contigs')
parser.add_argument('-T', '--taxonomy', metavar = "FILE", default = None,
                    help = "TAB-delimited taxonomy file that contains phylum, class, order, family\
                            genus and species annotations of each contig. Contig names has to match\
                            with the ones in other files, obviously")
parser.add_argument('-A', '--additional-metadata', metavar = "FILE", default = None,
                    help = "A TAB-delimited file for additional metadata for contigs. The file should\
                            contain all contigs that are present in other files.")
parser.add_argument('-l', '--taxonomic-level', metavar = 'NAME', default = 'phylum',
                    help = 'The level of taxonomy to annotate the tree. The default is %(default)s.')
parser.add_argument('-o', '--output-dir', metavar = 'DIRECTORY', default = None,
                    help = 'Output directory for output storage')
parser.add_argument('-p', '--port-number', metavar = 'INT', default = 8080, type=int,
                    help = 'Port number to use for communication; the default\
                            (%(default)d) should be OK for almost everyone.')
parser.add_argument('-s', '--state', metavar = "FILE", default = None,
                    help = "State file for loading previous session.")


progress = terminal.Progress()
run = terminal.Run()

#######################################################################################################################
# Input handler
#######################################################################################################################

class RuninfoIO:
    def __init__(self, args):
        self.runinfo = {}
        self.contig_rep_seqs = {}
        self.contigs_summary_index = {}
        self.contig_lengths = {}
        self.taxonomy = None
        self.taxonomic_level = None
        self.additional_metadata_path = None
        self.P = lambda x: os.path.join(self.runinfo['output_dir'], x)

        self.cwd = os.getcwd()

        self.state = args.state

        if args.runinfo:
            # runinfo dict provided: we don't want anything else
            if args.fasta_file or args.metadata or args.tree:
                raise utils.ConfigError, "You declared a RUNINFO dict with '-r'. You are not allowed to\
                                               declare any of '-f', '-m', or '-t' parameters if you have a\
                                               RUNINFO dict. Please refer to the documentation."

            if not os.path.exists(args.runinfo):
                raise utils.ConfigError, "'%s'? No such file." % (args.runinfo)

            self.runinfo = dictio.read_serialized_object(args.runinfo)
            

            if not self.runinfo.has_key('profiler_version') or self.runinfo['profiler_version'] != PaPi.profiler.__version__:
                raise utils.ConfigError, "RUNINFO.cp seems to be generated from an older version of PaPi\
                                               profiler that is not compatible with the current interactive interface\
                                               anymore. You need to re-run PaPi profiler on these projects."

            if not self.runinfo.has_key('metadata_txt'):
                raise utils.ConfigError, "'%s' does not seem to be a PaPi RUNINFO.cp." % (args.runinfo)

            if not os.path.exists(self.P(self.runinfo['metadata_txt'])):
                new_output_dir = os.path.dirname(os.path.join(os.getcwd(), args.runinfo))
                old_output_dir = self.runinfo['output_dir']

                self.runinfo = dictio.reset_output_dir(args.runinfo, old_output_dir, new_output_dir)

                if not os.path.exists(self.P(self.runinfo['metadata_txt'])):
                    raise utils.ConfigError, "File paths are broken in '%s'. Did you transfer this run\
                                                   from another computer? Well. I really don't know what to\
                                                   suggest at this point :/"

            self.contigs_summary_index = dictio.read_serialized_object(self.P(self.runinfo['profile_summary_index']))

            ###########################################################################################################
            # we're done
            ###########################################################################################################
            self.runinfo['self_path'] = args.runinfo

        else:
            # self.runinfo *must* contain 'tnf_tree', 'metadata_json', 'output_dir' and 'self_path'.
            if (not args.fasta_file) or (not args.metadata) or (not args.tree) or (not args.output_dir):
                raise utils.ConfigError, "If you do not have a RUNINFO dict, you must declare each of\
                                               '-f', '-m', '-t' and '-o' parameters. Please see '--help' for\
                                               more detailed information on them."

            self.runinfo['tnf_tree'] = utils.ABS(args.tree)
            self.runinfo['splits_fasta'] = utils.ABS(args.fasta_file)
            self.runinfo['metadata_txt'] = utils.ABS(args.metadata)
            self.runinfo['output_dir'] = utils.ABS(args.output_dir)

            # sanity of the metadata
            #filesnpaths.is_file_json_formatted(args.metadata)
            filesnpaths.is_file_tab_delimited(self.runinfo['metadata_txt'])
            if not open(self.runinfo['metadata_txt']).readline().split('\t')[0] == "contigs":
                raise utils.ConfigError, "The first row of the first column of the metadata file must\
                                          say 'contigs', which is not the case for your metadata file\
                                          ('%s'). Please make sure this is a properly formatted metadata\
                                          file." % (self.runinfo['metadata_txt'])
            filesnpaths.is_file_fasta_formatted(self.runinfo['splits_fasta'])

            self.runinfo['self_path'] = os.path.join(self.runinfo['output_dir'], 'RUNINFO.cp')

            filesnpaths.gen_output_directory(self.runinfo['output_dir'])


        # take care of taxonomy if a file is provided. otherwise self.taxonomy remain None
        if args.taxonomy:
            if not args.taxonomic_level:
                raise utils.ConfigError, "When a taxonomy file is declared, a taxonomic level to visualize\
                                               has to be defined."

            self.taxonomic_level = args.taxonomic_level.lower()

            if self.taxonomic_level not in levels_of_taxonomy:
                raise utils.ConfigError, "The taxonomic level '%s' is not a valid one. Taxonomic level has\
                                               to match one of these: %s" % (args.taxonomic_level,
                                                                             levels_of_taxonomy)

            filesnpaths.is_file_tab_delimited(args.taxonomy)
            self.taxonomy = utils.get_TAB_delimited_file_as_dictionary(args.taxonomy, expected_fields = levels_of_taxonomy)

        if args.additional_metadata:
            filesnpaths.is_file_tab_delimited(args.additional_metadata)
            self.additional_metadata_path = args.additional_metadata

        self.check_names_consistency()
        self.convert_metadata_into_json()

        fasta = u.SequenceSource(self.P(self.runinfo['splits_fasta']))

        while fasta.next():
            self.contig_rep_seqs[fasta.id] = fasta.seq
            self.contig_lengths[fasta.id] = len(fasta.seq)


    def check_names_consistency(self):
        tree = Tree(self.P(self.runinfo['tnf_tree']))
        contigs_in_tree = sorted([n.name for n in tree.get_leaves()])
        contigs_in_metadata = sorted([l.split('\t')[0] for l in open(self.P(self.runinfo['metadata_txt'])).readlines()[1:]])
        contigs_in_fasta = sorted(utils.get_all_ids_from_fasta(self.P(self.runinfo['splits_fasta'])))

        try:
            assert(contigs_in_fasta == contigs_in_tree == contigs_in_metadata)
        except:
            S = lambda x, y: "agrees" if x == y else "does not agree"
            raise utils.ConfigError, "Contigs name found in the FASTA file, the tree file and the\
                                           metadata needs to match perfectly. It seems it is not the\
                                           case for the input you provided (the metadata %s with the tree,\
                                           the tree %s with the fasta, the fasta %s with the metadata;\
                                           HTH!)." % (S(contigs_in_metadata, contigs_in_tree),
                                                      S(contigs_in_fasta, contigs_in_tree),
                                                      S(contigs_in_metadata, contigs_in_fasta))

        if self.taxonomy:
            contigs_in_taxonomy = set(self.taxonomy.keys())
            for contig in contigs_in_metadata:
                if not contig in contigs_in_taxonomy:
                    raise utils.ConfigError, "Contig names in taxonomy do not include all contig names present\
                                                   in other files. Bad news :/"

        if self.additional_metadata_path:
            contigs_in_additional_metadata = set(sorted([l.split('\t')[0] for l in open(self.additional_metadata_path).readlines()[1:]]))
            for contig in contigs_in_tree:
                if contig not in contigs_in_additional_metadata:
                    raise utils.ConfigError, "Contig names in additional metadata file do not include all contig names present\
                                                   in other files. Bad news :/"


    def update_runinfo_on_disk(self):
        path = self.runinfo.pop('self_path')
        dictio.write_serialized_object(self.runinfo, path)


    def convert_metadata_into_json(self):
        metadata_file_path = self.P(self.runinfo['metadata_txt'])

        if self.taxonomy:
            metadata_headers = utils.get_columns_of_TAB_delim_file(metadata_file_path)
            metadata_dict = utils.get_TAB_delimited_file_as_dictionary(metadata_file_path)
            for contig in metadata_dict.keys():
                metadata_dict[contig][self.taxonomic_level] = self.taxonomy[contig][self.taxonomic_level]

            new_metatada_file_path = filesnpaths.get_temp_file_path()
            headers = ['contigs', self.taxonomic_level] + metadata_headers
            utils.store_dict_as_TAB_delimited_file(metadata_dict, new_metatada_file_path, headers)
            metadata_file_path = new_metatada_file_path

        if self.additional_metadata_path:
            metadata_headers = utils.get_columns_of_TAB_delim_file(metadata_file_path)
            additional_headers = utils.get_columns_of_TAB_delim_file(self.additional_metadata_path)
            metadata_dict = utils.get_TAB_delimited_file_as_dictionary(metadata_file_path)
            metadata_dict = utils.get_TAB_delimited_file_as_dictionary(self.additional_metadata_path, dict_to_append = metadata_dict)
            
            new_metatada_file_path = filesnpaths.get_temp_file_path()
            headers = ['contigs'] + metadata_headers + additional_headers
            utils.store_dict_as_TAB_delimited_file(metadata_dict, new_metatada_file_path, headers)
            metadata_file_path = new_metatada_file_path


        json_obj = utils.get_json_obj_from_TAB_delim_metadata(metadata_file_path)

        temp_file_path = filesnpaths.get_temp_file_path()
        f = open(temp_file_path, 'w')
        f.write(json_obj)
        f.close()
        self.runinfo['metadata_json'] = temp_file_path


    def end(self):
        # FIXME: remove temp files and stuff
        pass

try:
    d = RuninfoIO(parser.parse_args())
except utils.ConfigError, e:
    print e
    sys.exit(-1)


#######################################################################################################################
# bottle callbacks
#######################################################################################################################

@route('/')
def redirect_to_app():
    redirect('/app/index.html')

@route('/app/:filename#.*#')
def send_static(filename):
    response.set_header('Content-Type', 'application/json')
    response.set_header('Pragma', 'no-cache')
    response.set_header('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate')
    response.set_header('Expires', 'Thu, 01 Dec 1994 16:00:00 GMT')
    return static_file(filename, root=static_dir)

@route('/data/<name>')
def send_data(name):
    response.set_header('Content-Type', 'application/json')
    response.set_header('Pragma', 'no-cache')
    response.set_header('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate')
    response.set_header('Expires', 'Thu, 01 Dec 1994 16:00:00 GMT')
    if name == "tree":
        return static_file(d.P(d.runinfo['tnf_tree']), root ='/')
    elif name == "meta":
        return static_file(d.runinfo['metadata_json'], root='/')
    elif name == "state":
        if d.state:
            return static_file(utils.ABS(d.state), root='/')
        return "{}"
    elif name == "contig_lengths":
        return json.dumps(d.contig_lengths)

@route('/data/charts/<contig_name>')
def charts(contig_name):
    data = {'layers': [],
             'coverage': [],
             'variability': [],
             'competing_nucleotides': []}

    if not d.contigs_summary_index.has_key(contig_name):
        return data

    contigs = dictio.read_serialized_object(d.P(d.contigs_summary_index[contig_name]))
    layers = sorted(contigs.keys())

    for layer in layers:
        data['layers'].append(layer)
        data['coverage'].append(contigs[layer]['coverage'])
        data['variability'].append(contigs[layer]['variability'])
        data['competing_nucleotides'].append(contigs[layer]['competing_nucleotides'])

    return json.dumps(data)

@route('/data/contig/<contig_name>')
def contig_info(contig_name):
    return d.contig_rep_seqs[contig_name]

@route('/save_state', method='POST')
def save_state():
    state = request.forms.get('state')

    now = datetime.datetime.now()
    state_output_path = os.path.join(d.runinfo['output_dir'], now.strftime("state-%Y-%m-%d-%H-%M-%S.json"))

    state_output = open(state_output_path, 'w')
    state_output.write(state)
    state_output.close()

@route('/submit', method='POST')
def get_data():
    bins = json.loads(request.forms.get('groups'))
    svg = request.forms.get('svg')

    if svg:
        # take care of the SVG.
        svg_output_path = os.path.join(d.runinfo['output_dir'], 'BINS.svg')
        print '* Storing SVG data into "%s"' % svg_output_path
        svg_output = open(svg_output_path, 'w')
        svg_output.write(svg)
        svg_output.close()
        d.runinfo['bins_svg'] = svg_output_path

    if not bins:
        return

    # take care of bins.. start by removing the bins dir if it exists.
    bins_dir = os.path.join(d.runinfo['output_dir'], 'BINS')
    if os.path.exists(bins_dir):
        shutil.rmtree(bins_dir)
    os.makedirs(bins_dir)
    d.runinfo['bins'] = {} 
    print '* Storing bins under "%s"' % bins_dir
    for bin in bins:
        output_path = os.path.join(d.runinfo['output_dir'], 'BINS', bin + '.fa')
        output = open(output_path, 'w')
        for contig in bins[bin]:
            output.write('>%s\n%s\n' % (contig, d.contig_rep_seqs[contig]))
        output.close()
        d.runinfo['bins'][bin] = output_path

    # update RUNINFO dict...
    print '* Storing updated RUNINFO.cp'
    d.update_runinfo_on_disk()
    print


port = parser.parse_args().port_number

port = utils.get_available_port_num(start = port)

if not port:
    print 'Error: PaPi failed to find a port number that is available :('
    sys.exit(-1)
else:
    print '(using port number %d)' % port

# increase maximum size of form data to 100 MB
BaseRequest.MEMFILE_MAX = 1024 * 1024 * 100 

try:
    server_process = Process(target=run_server, kwargs={'host': '127.0.0.1', 'port': port, 'quiet': True})
    server_process.start()
    webbrowser.open_new("http://127.0.0.1:%d" % port)
    print "\n\n -- When you are finished, press CTRL+C to terminate the server..\n\n"
    server_process.join()
except KeyboardInterrupt:
    print("\n\n -- Server is being terminated, please wait.\n\n")
    server_process.terminate()
    sys.exit(1)
