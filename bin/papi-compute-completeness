#!/usr/bin/env python
# -*- coding: utf-8

"""
Copyright (C) 2015, PaPi Authors

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Please read the COPYING file.
"""


import sys
import argparse

import PaPi.terminal as terminal 

from PaPi.completeness import Completeness
from PaPi.utils import ConfigError

run = terminal.Run()
progress = terminal.Progress()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A script to generate completeness info for a given list of _splits_')
    parser.add_argument('splits_txt', metavar = 'SPLITS_TXT',
                        help = 'File with split names.')
    parser.add_argument('annotation_db', metavar = 'ANNOTATION_DB',
                        help = 'Annotation database to read from.')
    parser.add_argument('-e', '--min-e-value', default=1e-15, type=float, metavar = 'E-VALUE',
                        help = 'Minimum significance score of an HMM find to be considered as a valid hit.\
                                Default is %(default)g.')
    parser.add_argument('--list-sources', action='store_true', default=False,
                        help = 'Show available single-copy gene search results and exit.')
    parser.add_argument('--source', default=None,
                        help = 'Source to focus on. If none declared, all single-copy gene sources\
                                are going to be listed.')
    
    args = parser.parse_args()

    completeness = Completeness(args.annotation_db, args.source)

    if args.list_sources:
        run.info('Available singlecopy sources', ', '.join(results.sources))
        sys.exit()

    split_names = set([s.strip() for s in open(args.splits_txt).readlines() if s.strip() and not s.startswith('#')])

    try:
        results = completeness.get_info_for_splits(split_names, min_e_value = args.min_e_value)
    except ConfigError, e:
        print e
        sys.exit(-1)

    run.info('Completeness for %d splits (p < %g)' % (len(split_names), args.min_e_value), '', header=True)
    for source in completeness.sources:
        run.info(source, '%.2f%% complete, %.2f%% contamination' % (results[source]['percent_complete'], results[source]['percent_contamination']))

    print

