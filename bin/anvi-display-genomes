#!/usr/bin/env python
# -*- coding: utf-8
"""Entry point to the interactive interface for genome view.

The massage of the data is being taken care of in the interactive module,
and this file implements the bottle callbacks.
"""

import sys
from anvio.argparse import ArgumentParser

import anvio
import anvio.utils as utils
import anvio.terminal as terminal
import anvio.interactive as interactive
from anvio.bottleroutes import BottleApplication

from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2021, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"
__requires__ = ['external-genomes', 'internal-genomes', 'pan-db']
__provides__ = ['genome-view']
__description__ = "Start an anvi'o interactive interface for 'genome view'"

run = terminal.Run()
progress = terminal.Progress()

if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('GENOMES', "Tell anvi'o where your genomes are.")
    groupA.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))
    groupA.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))

    groupB = parser.add_argument_group('GENE ASSOCIATIONS', "Tell anvi'o how genes in your genomes related to one another.")
    groupB.add_argument(*anvio.A('pan-db'), **anvio.K('pan-db', {'required': False}))

    groupC = parser.add_argument_group("PRO STUFF", "Tell anvi'o which gene caller to use.")
    groupC.add_argument(*anvio.A('gene-caller'), **anvio.K('gene-caller'))

    groupB = parser.add_argument_group('OPTIONAL INPUTS', "Where the yay factor becomes a reality.")
    groupB.add_argument(*anvio.A('tree'), **anvio.K('tree'))

    groupD = parser.add_argument_group('VISUALS RELATED', "Parameters that give access to various adjustements regarding\
                                                           the interface.")
    groupD.add_argument(*anvio.A('title'), **anvio.K('title'))

    groupE = parser.add_argument_group('SWEET PARAMS OF CONVENIENCE', "Parameters and flags that are not quite essential (but nice to have).")
    groupE.add_argument(*anvio.A('dry-run'), **anvio.K('dry-run'))
    groupE.add_argument(*anvio.A('skip-auto-ordering'), **anvio.K('skip-auto-ordering'))
    groupE.add_argument(*anvio.A('skip-news'), **anvio.K('skip-news'))

    groupF = parser.add_argument_group('SERVER CONFIGURATION', "For power users.")
    groupF.add_argument(*anvio.A('ip-address'), **anvio.K('ip-address'))
    groupF.add_argument(*anvio.A('port-number'), **anvio.K('port-number'))
    groupF.add_argument(*anvio.A('browser-path'), **anvio.K('browser-path'))
    groupF.add_argument(*anvio.A('read-only'), **anvio.K('read-only'))
    groupF.add_argument(*anvio.A('server-only'), **anvio.K('server-only'))
    groupF.add_argument(*anvio.A('password-protected'), **anvio.K('password-protected'))
    groupF.add_argument(*anvio.A('user-server-shutdown'), **anvio.K('user-server-shutdown'))

    args = parser.get_args(parser)

    try:
        args.mode = 'genomeview'
        d = interactive.GenomeView(args)

        args.port_number = utils.get_port_num(args.port_number, args.ip_address, run=run)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)

    if args.dry_run:
        run.info_single('Dry run? Kthxbai.', nl_after=1, nl_before=1)
        sys.exit()

    app = BottleApplication(d)
    app.run_application(args.ip_address, args.port_number)
