#!/usr/bin/env python
# -*- coding: utf-8
"""Integrate tRNA-seq with (meta)genomic data, relating tRNA-seq seeds to tRNA genes"""

import sys

import anvio
import anvio.genomictrnaseq as genomictrnaseq

from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2022, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['semiller10']
__resources__ = []
__tags__ = ['trnaseq']
__requires__ = ['trnaseq-contigs-db', 'seeds-specific-txt', 'modifications-txt', 'contigs-db']
__provides__ = ['trna-gene-hits']
__description__ = (
    "Integrate tRNA-seq with (meta)genomic data, relating tRNA-seq seeds to tRNA genes")


def main(args):
    permuter = genomictrnaseq.SeedPermuter(args)
    integrator = genomictrnaseq.Integrator(args)

    # Permute tRNA-seq seed sequences at positions with predicted modifications.
    permuter.go()

    # Relate seeds to (meta)genomic tRNA genes.
    integrator.permuted_seeds_fasta_path = permuter.permuted_seeds_fasta_path
    integrator.go()


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group(
        'TRNASEQ INPUTS',
        "THREE INPUT FILES are required: "
        "(1) A 'trnaseq'-variant contigs database produced by `anvi-merge-trnaseq`, "
        "(2) a table of **specific** coverages of seeds produced by `anvi-tabulate-trnaseq`, "
        "(3) a table of seed modifications also produced by `anvi-tabulate-trnaseq`.")
    groupA.add_argument(*anvio.A('trnaseq-contigs-db'), **anvio.K('trnaseq-contigs-db'))
    groupA.add_argument(*anvio.A('seeds-specific-txt'), **anvio.K('seeds-specific-txt'))
    groupA.add_argument(*anvio.A('modifications-txt'), **anvio.K('modifications-txt'))

    groupB = parser.add_argument_group(
        'GENOMIC INPUTS',
        "Different (meta)genomic inputs can be provided. The selection of input type depends on "
        "the purpose of running this program. One purpose could be finding tRNAs that are uniquely "
        "expressed by genomes in a metagenome, followed by running "
        "`anvi-compute-trnaseq-functional-affinity`. Another purpose could be finding all possible "
        "genomes that could be responsible for expression of the tRNAs. Note that the flag, "
        "`--ambiguous-genome-assignment`, must be used to preserve seed hits to multiple genomes, "
        "when supplying multiple genomes in a collection or internal/external genomes, or when "
        "running the program again with another genome or metagenome to append new hits. The "
        "following are valid inputs: "
        "(1) A single contigs database. This could represent a genome or metagenome. "
        "(2) A collection of bins, representing genomes in a metagenome. This requires a contigs "
        "database, profile database, and collection."
        "(3) A single bin. This requires a contigs database, profile database, collection and bin "
        "ID. "
        "(4) Internal genomes, or a list of metagenomic bins (can be used with external genomes). "
        "(5) External genomes, or a list of contigs databases representing genomes (can be used "
        "with internal genomes).")
    groupB.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    groupB.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    groupB.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    groupB.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    groupB.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    groupB.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))

    groupC = parser.add_argument_group('OPTIONAL')
    groupC.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    groupC.add_argument('-n', '--min-nt-frequency',
                        metavar='FLOAT', type=float,
                        default=genomictrnaseq.SeedPermuter.default_min_nt_frequency,
                        help="For a position in a tRNA-seq seed sequence, this is the minimum nucleotide relative frequency, "
                             "averaged across samples in which the modification is detected, "
                             "that is required for the nucleotide to be substituted in the permuted sequence.")
    groupC.add_argument('-v', '--max-variable-positions',
                        metavar='INT', type=int,
                        default=genomictrnaseq.SeedPermuter.default_max_variable_positions,
                        help="The maximum number of positions with predicted modifications that can be permuted at once in a tRNA-seq seed sequence.")
    groupC.add_argument('-x', '--max-mismatches',
                        metavar='INT', type=int,
                        default=genomictrnaseq.Integrator.default_max_mismatches,
                        help="The maximum number of mismatches allowed in a gapless alignment between a permuted/non-permuted tRNA-seq seed and tRNA gene sequence.")
    groupC.add_argument('-f', '--use-full-length-seeds',
                        default=False, action='store_true',
                        help="Use this flag to retain only tRNA-seq seed sequences that encompass an entire tRNA gene to the exclusion of 3' fragments.")

    groupD = parser.add_argument_group('TEMPORARY FILES', "By default, certain temporary files are produced: "
                                       "(1) A FASTA file of permuted tRNA-seq seed sequences and "
                                       "(2) BLAST databases and output tables from searching permuted seeds against tRNA genes. "
                                       "The global anvi'o option, `--tmp-dir`, allows the user to provide a single output directory for all of these. "
                                       "Alternatively, program-specific options give more control over temp file storage.")
    groupD.add_argument('-r', '--permuted-seeds-fasta',
                        metavar='FILE_PATH', type=str,
                        default=None,
                        help="FASTA file of permuted tRNA-seq seed sequences.")
    groupD.add_argument('-d', '--blast-dir',
                        metavar='DIRECTORY_PATH', type=str,
                        default=None,
                        help="Directory to store BLAST databases and tables generated in searching permuted seeds against tRNA genes.")

    groupE = parser.add_argument_group('AUTHORITY')
    groupE.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it'))

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
