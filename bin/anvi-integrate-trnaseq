#!/usr/bin/env python
# -*- coding: utf-8
"""Integrate tRNA-seq with (meta)genomic data, relating tRNA-seq seeds to tRNA genes"""

import sys

import anvio
import anvio.terminal as terminal
import anvio.genomictrnaseq as genomictrnaseq

from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2022, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['semiller10']
__resources__ = []
__tags__ = ['trnaseq']
__requires__ = ['trnaseq-contigs-db', 'seeds-specific-txt', 'modifications-txt', 'contigs-db']
__provides__ = ['trna-gene-hits']
__description__ = (
    "Integrate tRNA-seq with (meta)genomic data, relating tRNA-seq seeds to tRNA genes")


def main(args):
    if args.list_genomes:
        integrated_genome_dict = genomictrnaseq.Integrator.get_integrated_genomes(
            args.trnaseq_contigs_db)
        print_genomes(integrated_genome_dict)
        return

    sanity_check(args)

    permuter = genomictrnaseq.SeedPermuter(args)
    integrator = genomictrnaseq.Integrator(args)

    # Permute tRNA-seq seed sequences at positions with predicted modifications.
    permuter.go()

    # Relate seeds to (meta)genomic tRNA genes.
    integrator.permuted_seeds_fasta_path = permuter.permuted_seeds_fasta_path
    integrator.go()


def sanity_check(args):
    """Do basic checks of the combinations of genomic input arguments."""
    if args.contigs_db and (args.internal_genomes or args.external_genomes):
        raise ConfigError("`--contigs-db` is not compatible with `--internal-genomes` or "
                          "`--external-genomes`.")

    if (args.profile_db is not None) or (args.collection_name is not None):
        if (0 < (args.contigs_db is not None) + (args.profile_db is not None) +
            (args.collection_name is not None) < 3):
            raise ConfigError("A collection must be provided using `--contigs-db`, `--profile-db`, "
                              "and `--collection-name`.")

    if args.bin_id is not None:
        if (0 < (args.contigs_db is not None) + (args.profile_db is not None) +
            (args.collection_name is not None) + (args.bin_id is not None) < 4):
            raise ConfigError("`--bin-id` must be used with `--contigs-db`, `--profile-db`, and "
                              "`--collection-name`.")


def print_genomes(integrated_genome_dict):
    """
    Print to terminal information on the (meta)genomic contigs databases and profile
    databases/collections/bins integrated with the input 'trnaseq'-variant contigs database.

    Parameters
    ==========
    integrated_genome_dict : dict
        Nested dictionary with levels for database, collection, and bin.
    """
    run = terminal.Run()
    if not integrated_genome_dict:
        raise ConfigError(
            "The tRNA gene hits table in the tRNA-seq contigs database does not contain any rows!")

    for contigs_db_info, profile_db_dict in integrated_genome_dict.items():
        run.info_single(
            f"Contigs database project name: {contigs_db_info[0]}   "
            f"Hash: {contigs_db_info[1]}",
            cut_after=0)

        if profile_db_dict is None:
            continue

        for profile_db_sample_id, collections_dict in profile_db_dict.items():
            run.info_single(
                f"Profile database sample ID: {profile_db_sample_id}", cut_after=0, level=2)

            for collection_name, bin_ids in collections_dict.items():
                run.info_single(f"Collection name: {collection_name}", cut_after=0, level=3)

                for bin_id in bin_ids:
                    run.info_single(f"Bin ID: {bin_id}", cut_after=0, level=4)


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    group1A = parser.add_argument_group(
        'TRNASEQ INPUTS',
        "THREE FILES are required: "
        "(1) A 'trnaseq'-variant contigs database produced by `anvi-merge-trnaseq`, "
        "(2) a table of **specific** coverages of seeds produced by `anvi-tabulate-trnaseq`, "
        "(3) a table of seed modifications also produced by `anvi-tabulate-trnaseq`.")
    group1A.add_argument(*anvio.A('trnaseq-contigs-db'), **anvio.K('trnaseq-contigs-db'))
    group1A.add_argument(*anvio.A('seeds-specific-txt'), **anvio.K('seeds-specific-txt'))
    group1A.add_argument(*anvio.A('modifications-txt'), **anvio.K('modifications-txt'))

    group1B = parser.add_argument_group(
        'GENOMIC INPUTS',
        "Different (meta)genomic inputs can be provided. The selection of input type depends on "
        "the purpose of running this program. One purpose could be finding tRNAs that are uniquely "
        "expressed by genomes in a metagenome, followed by running "
        "`anvi-compute-trnaseq-functional-affinity`. Another purpose could be finding all possible "
        "genomes that could be responsible for expression of the tRNAs. Note that the flag, "
        "`--ambiguous-genome-assignment`, must be used to preserve seed hits to multiple genomes, "
        "when supplying multiple genomes in a collection or internal/external genomes, or when "
        "running the program again with another genome or metagenome to append new hits. The "
        "following are valid inputs: "
        "(1) A single contigs database. This could represent a genome or metagenome. "
        "(2) A collection of bins, representing genomes in a metagenome. This requires a contigs "
        "database, profile database, and collection."
        "(3) A single bin. This requires a contigs database, profile database, collection and bin "
        "ID. "
        "(4) Internal genomes, or a list of metagenomic bins (can be used with external genomes). "
        "(5) External genomes, or a list of contigs databases representing genomes (can be used "
        "with internal genomes).")
    group1B.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'required': False}))
    group1B.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    group1B.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    group1B.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    group1B.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    group1B.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))

    group1C = parser.add_argument_group(
        'PERMUTATION OF MODIFICATIONS',
        "For tRNA-seq seeds to be accurately matched to tRNA genes, nucleotide positions with "
        "predicted modifications in the seeds are permuted, generating a set of query sequences "
        "per seed. Permutation is needed to find the gene sequences, which lack the mutation "
        "signatures induced by modifications in tRNA-seq reads. Seed sequences are built from a "
        "simple majority consensus of the reads; if a majority of reads have a mutation at a "
        "position, the underlying unmodified nucleotide is not represented in the seed. "
        "Permutation does not entirely solve the problem for positions that have such high levels "
        "of a modification that there is no signature of mutational variability. The common "
        "modification of this sort is I34. The unmodified nucleotide is A, but inosine is read as "
        "G, and is typically found in virtually all tRNA transcripts when it occurs. The algorithm "
        "solves the problem of I34 with a tailored solution; contact the developers to accommodate "
        "any other cases like this that might arise.")
    group1C.add_argument(
        '-n', '--min-nt-frequency', metavar='FLOAT', type=float,
        default=genomictrnaseq.SeedPermuter.default_min_nt_frequency,
        help="For a position in a tRNA-seq seed sequence, this is the minimum nucleotide relative "
             "frequency, averaged across samples in which the modification is detected, that is "
             "required for the nucleotide to be substituted in the permuted sequence. For example, "
             "if this argument is 0.05, and a predicted modified position in a seed has average "
             "relative frequencies of A, C, G, and T equal to 0.02, 0.03, 0.1, and 0.85, "
             "respectively, then permuted versions of the seed will contain G and T at the "
             "position but not A or C.")
    group1C.add_argument(
        '-v', '--max-variable-positions', metavar='INT', type=int,
        default=genomictrnaseq.SeedPermuter.default_max_variable_positions,
        help="The maximum number of positions with predicted modifications that can be permuted at "
             "once in a tRNA-seq seed sequence. For example, if this argument is 5, and a seed has "
             "6 positions with predicted modifications, then a permuted sequence can have at most "
             "5 of the 6 nucleotides changed relative to the seed.")

    group1D = parser.add_argument(
        'SEED/GENE MATCHING',
        "After tRNA-seq seed sequences are permuted, the original and permuted sequences are "
        "aligned to tRNA genes in the supplied contigs database(s). Matches are selected from "
        "filtered alignments.")
    group1D.add_argument(
        '-x', '--max-mismatches', metavar='INT', type=int,
        default=genomictrnaseq.Integrator.default_max_mismatches,
        help="The maximum number of mismatches allowed in a gapless alignment between a permuted "
             "or non-permuted tRNA-seq seed and a tRNA gene.")
    group1D.add_argument(
        '-f', '--full-gene', default=False, action='store_true',
        help="Use this flag to only retain tRNA-seq seeds that align with a full tRNA gene, "
             "excluding seeds representing 3' fragments.")
    group1D.add_argument(
        '-a', '--ambiguous-genome-assignment', default=False, action='store_true',
        help="Use this flag to allow tRNA-seq seeds to be assigned to tRNA genes in multiple "
             "genomes or a single genome and unbinned contigs. By default, seeds can only be "
             "assigned to genes in a single genome to prevent ambiguity (when any genomic input "
             "beside a single contigs database using `--contigs-db` is provided). For example, "
             "consider the default option with two internal genomes. If a seed matches genes in "
             "both bins, the seed is disregarded; if a seed matches genes in one bin and also "
             "matches genes in unbinned contigs, the seed is also disregarded. The seed can only "
             "match one or more genes in a single genome. Note that this flag not only affects the "
             "result when multiple genomes are provided using `--internal-genomes` and "
             "`--external-genomes`, but also has the dual purpose of allowing the program to be "
             "run multiple times with the same seeds against different genomic references, "
             "appending new seed/gene matches in the tRNA-seq contigs database. To overwrite all "
             "existing assignments rather than appending, also use `--just-do-it`.")

    group1E = parser.add_argument_group(
        'TEMPORARY FILES',
        "By default, temporary files are produced: "
        "(1) A FASTA file of permuted tRNA-seq seed sequences and "
        "(2) BLAST databases and output tables from searching permuted seeds against tRNA genes. "
        "The global anvi'o option, `--tmp-dir`, allows the user to provide a single output "
        "directory for all of these. Alternatively, program-specific options give more control "
        "over temp file storage.")
    group1E.add_argument(
        '-r', '--permuted-seeds-fasta', metavar='FILE_PATH', type=str, default=None,
        help="FASTA file of original and permuted tRNA-seq seed sequences.")
    group1E.add_argument(
        '-d', '--blast-dir', metavar='DIRECTORY_PATH', type=str, default=None,
        help="Directory to store BLAST databases and tables generated in searching original and "
             "permuted seeds against tRNA genes.")

    group1F = parser.add_argument_group('OTHER')
    group1F.add_argument(*anvio.A('num-threads'), **anvio.K('num-threads'))
    group1F.add_argument(*anvio.A('just-do-it'), **anvio.K('just-do-it', {
        'help': "Overwrite existing tRNA-seq seed assignments to tRNA genes in the tRNA-seq "
                "contigs database."}))

    group2 = parser.add_argument_group('INFO')
    group2.add_argument(
        '-l', '--list-genomes', default=False, action='store_true',
        help="Report information on the sources of tRNA genes that have already been associated "
             "with a tRNA-seq contigs database. The `--trnaseq-contigs-db` argument must be "
             "provided along with this flag. The project names and hashes of (meta)genomic contigs "
             "databases and any collections/bins in which linked tRNA genes were found are printed "
             "to the terminal.")

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
