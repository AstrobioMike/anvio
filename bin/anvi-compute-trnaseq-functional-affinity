#!/usr/bin/env python
# -*- coding: utf-8
"""Relate changes in tRNA-seq seed abundances to the codon usage of gene functions"""

import sys

import anvio
import anvio.terminal as terminal
import anvio.genomictrnaseq as genomictrnaseq

from anvio.argparse import ArgumentParser
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2022, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['semiller10']
__resources__ = []
__tags__ = ['trnaseq']
__requires__ = ['trnaseq-contigs-db', 'contigs-db']
__provides__ = []
__description__ = ("Relate changes in tRNA-seq seed abundances to the codon usage of gene "
                   "functions")


def main(args):
    if args.list_sample_names:
        sample_names = genomictrnaseq.Affinitizer.list_sample_names(args.seeds_specific_txt)
        print_sample_names(sample_names)
        return

    sanity_check(args)

    affinitizer = genomictrnaseq.Affinitizer(args)
    affinitizer.go()


def sanity_check(args):
    if args.trnaseq_contigs_db is None:
        raise ConfigError("`--trnaseq-contigs-db` is a required argument for computation of "
                          "affinities.")
    if args.reference_sample is None:
        raise ConfigError("`--reference-sample` is a required argument of computation of "
                          "affinities.")

    # Do basic checks of the combinations of genomic input arguments.
    if args.contigs_db and (args.internal_genomes or args.external_genomes):
        raise ConfigError("`--contigs-db` is not compatible with `--internal-genomes` or "
                          "`--external-genomes`.")

    if (args.profile_db is not None) or (args.collection_name is not None):
        if (0 < (args.contigs_db is not None) + (args.profile_db is not None) +
            (args.collection_name is not None) < 3):
            raise ConfigError("A collection must be provided using `--contigs-db`, `--profile-db`, "
                              "and `--collection-name`.")

    if args.bin_id is not None:
        if (0 < (args.contigs_db is not None) + (args.profile_db is not None) +
            (args.collection_name is not None) + (args.bin_id is not None) < 4):
            raise ConfigError("`--bin-id` must be used with `--contigs-db`, `--profile-db`, and "
                              "`--collection-name`.")


def print_sample_names(sample_names):
    if not sample_names:
        raise ConfigError("No sample names were found in `--seeds-specific-txt`, the table of "
                          "tRNA-seq seed specific coverages generated by `anvi-tabulate-trnaseq`!")

    run = terminal.Run()
    run.info("tRNA-seq sample names", f"{', '.join(sample_names)}", nl_after=1)


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    group1A = parser.add_argument_group(
        'TRNASEQ INPUTS',
        "TWO FILES are required to compute functional affinity: "
        "(1) A 'trnaseq'-variant contigs database produced by `anvi-merge-trnaseq` and integrated "
        "with (meta)genomic contigs database(s) by `anvi-integrate-trnaseq`, "
        "(2) a table of **specific** coverages of seeds produced by `anvi-tabulate-trnaseq` from "
        "the 'trnaseq'-variant contigs database (and other inputs).")
    group1A.add_argument(*anvio.A('trnaseq-contigs-db'),
                         **anvio.K('trnaseq-contigs-db', {'required': False}))
    group1A.add_argument(*anvio.A('seeds-specific-txt'),
                         **anvio.K('seeds-specific-txt', {'required': True}))

    group1B = parser.add_argument_group(
        'TRNASEQ SAMPLES',
        "A REFERENCE SAMPLE is required to compute functional affinity. Sample data is found in "
        "`seeds-specific-txt`. For convenience, running the current program with the "
        "`--seeds-specific-txt` argument and the `--list-sample` flag prints all sample names to "
        "the terminal.")
    group1B.add_argument(
        '-r', '--reference-sample', metavar='SAMPLE_NAME', type=str,
        help="The name of the tRNA-seq sample to be used as the reference in the calculation of "
             "functional affinity.")
    group1B.add_argument(
        '-n', '--nonreference-samples', metavar='SAMPLE_NAMES', nargs='+',
        help="Names of tRNA-seq samples, beside the specified reference sample, to be analyzed. By "
             "default, when this argument is not used, all of the samples in `seeds-specific-txt` "
             "are analyzed.")

    group1C = parser.add_argument_group(
        'GENOMIC INPUTS',
        "Different (meta)genomic inputs that have been integrated with the 'trnaseq'-variant "
        "contigs database can be provided. To find which (meta)genomes were integrated, run "
        "`anvi-integrate-trnaseq` with the `--list-genomes` flag. This will print the project "
        "names and hashes of (meta)genomic contigs databases and any bins (and their profile "
        "databases/collections) in which linked tRNA genes were found. Functional affinity is "
        "computed separately for each (meta)genome. For example, if two internal genomes are "
        "specified, then the functional affinity results for each will be returned. The following "
        "are valid inputs: "
        "(1) A single contigs database. This could represent a genome or metagenome. "
        "(2) A collection of bins, representing genomes in a metagenome. This requires a contigs "
        "database, profile database, and collection. "
        "(3) A single bin. This requires a contigs database, profile database, collection and bin "
        "ID. "
        "(4) Internal genomes, or a list of metagenomic bins (can be used with external genomes). "
        "(5) External genomes, or a list of contigs databases representing genomes (can be used "
        "with internal genomes).")
    group1C.add_argument(
        *anvio.A('contigs-db'), **anvio.K('contigs-db', {
            'required': False,
            'help': "Anvi'o (meta)genomic contigs database generated by "
                    "`anvi-gen-contigs-database`: NOT the tRNA-seq contigs database supplied to "
                    "`-t/--trnaseq-contigs-db`!"}))
    group1C.add_argument(*anvio.A('profile-db'), **anvio.K('profile-db', {'required': False}))
    group1C.add_argument(*anvio.A('collection-name'), **anvio.K('collection-name'))
    group1C.add_argument(*anvio.A('bin-id'), **anvio.K('bin-id'))
    group1C.add_argument(*anvio.A('internal-genomes'), **anvio.K('internal-genomes'))
    group1C.add_argument(*anvio.A('external-genomes'), **anvio.K('external-genomes'))

    group1D = parser.add_argument_group(
        'FUNCTIONS',
        "Functional affinity can be computed for functions from any source, or, indeed, for genes, "
        "in which case, the term \"gene affinity\" should be used instead. Functions from multiple "
        "sources can be compared at once. This program makes no effort to avoid redundancy in the "
        "genes or functions that are analyzed: for example, if KEGG BRITE hierarchy categories are "
        "analyzed, the same gene can occur in multiple KEGG KOfams that define the categories and "
        "in multiple categories; the same KOfam can occur in multiple categories; and, since the "
        "categories are nested hierarchically, the same lower-level category can be encompassed by "
        "multiple higher-level categories.")
    group1D.add_argument(
        '-f', '--function-sources', nargs='*',
        default=genomictrnaseq.Affinitizer.default_function_sources,
        help="Calculate affinity for functions annotated by these sources, e.g., 'KOfam', "
             "'KEGG_BRITE', 'COG20_FUNCTION'. If `--function-sources` is used as a flag without "
             "any arguments, then every source will be considered.")
    group1D.add_argument(
        '--function-accessions', nargs='+',
        help="Calculate affinity for select functions with these accessions from the source "
             "provided in `--function-sources`. To get accessions from multiple sources, instead "
             "use `--select-functions-txt`.")
    group1D.add_argument(
        '--function-names', nargs='+',
        help="Calculate affinity for select functions with these names from the source provided in "
             "`--function-sources`. To get function names from multiple sources, instead use "
             "`--select-functions-txt`.")
    group1D.add_argument(
        '--select-functions-txt',
        help="Selected functions can be listed in this tab-delimited file of three columns. The "
             "first column should contain function annotation sources, the second column "
             "accessions, and the third function names. An entry in the source column is required "
             "in every row, and either an accession or name, or both, should also be in a row. "
             "The file should not have a header of column names.")
    group1D.add_argument(
        '--gene-affinity', default=False, action='store_true',
        help="Compute affinity for genes rather than functions.")
    group1D.add_argument(
        '--gene-caller-ids', type=int, nargs='+',
        help="Select genes by ID, space-separated, if using `--gene-affinity`.")

    group1E = parser.add_argument_group(
        'ISOACCEPTOR PARAMETERS',
        "The calculation of functional affinity relies upon the abundances of tRNA isoacceptors, "
        "or groups of seeds with the same anticodon.")
    group1E.add_argument(
        '--min-coverage', metavar='INT', type=int,
        default=genomictrnaseq.Affinitizer.default_min_coverage,
        help="The coverage threshold for detection of a tRNA isoacceptor. Coverage is measured at "
             "the 3' (discriminator) nucleotide of the isoacceptor seeds. The threshold must be "
             "met in both the sample being analyzed and reference sample for the isoacceptor to be "
             "contribute to functional affinity.")
    group1E.add_argument(
        '--min-isoacceptors', metavar='INT', type=int,
        default=genomictrnaseq.Affinitizer.default_min_isoacceptors,
        help="The minimum number of tRNA isoacceptors that need to be detected in a (meta)genomic "
             "source for functional affinity to be calculated. For example, say the minimum number "
             "of isoacceptors is 5, there are two internal genomes, A and B, and 10 isoacceptors "
             "pass the minimum coverage threshold in A whereas 4 isoacceptors pass the threshold "
             "in B. Functional affinity will be calculated for genome A but not B.")
    group1E.add_argument(
        '--exclude-anticodons', nargs='+',
        help="Remove tRNA isoacceptors with the given anticodons from calculation of functional "
             "affinity.")

    group1F = parser.add_argument_group(
        'CODON FILTERS',
        "Functions and genes can be filtered by the number of codons that they contain, and "
        "codons can be selected for removal. The reliability or usefulness of the affinity metric "
        "is greater for functions with more analyzed codons decoded by measured tRNA-seq "
        "isoacceptors. Codon selection can be useful, for instance, in testing the effect of "
        "perturbations in the set of analyzed codons on the affinity results.")
    group1F.add_argument(
        '--min-analyzed-codons', type=int, default=0,
        help="Affinity is calculated for functions (or genes, with the flag, `--gene-affinity`) "
             "that contain at least this number of codons with corresponding tRNA-seq "
             "isoacceptors. For example, say a function contains gene sequences with 1,000 codons "
             "total, of which 300 can be decoded by isoacceptors screened for use in affinity "
             "calculations. If this argument is set to 500, then affinity would not be calculated "
             "for the function.")
    group1F.add_argument(
        '--function-min-total-codons', type=int, default=0,
        help="Affinity is calculated for functions that contain at least this number of codons "
             "total. Genes with fewer than `--gene-min-total-codons` are first removed, and then "
             "functional groups of the remaining genes with fewer than "
             "`--function-min-total-codons` are removed.")
    group1F.add_argument(
        '--gene-min-total-codons', type=int, default=0,
        help="Genes must contain at least this number of codons total to contribute to affinity "
             "calculations. When affinity is calculated for functions rather than genes (the "
             "default unless `--gene-affinity` is used), this filter is applied to genes before "
             "grouping them as functions.")
    group1F.add_argument(
        '--exclude-codons', nargs='+',
        help="Remove the given codons from the calculation of functional affinity.")
    group1F.add_argument(
        '--exclude-amino-acids', nargs='+',
        help="Remove codons that decode the given amino acids from calculation of functional "
             "affinity.")

    group1G = parser.add_argument(
        'RAREFACTION STATISTICS',
        "Rarefaction of the tRNA isoacceptors used in calculation of functional affinity provides "
        "a means of evaluating how representative the isoacceptors are of the whole tRNA pool. The "
        "smaller the subset of isoacceptors involved in the calculation, the less reliable the "
        "metric is at evaluating the gene functions favored for translation by the tRNA pool. "
        "Functional affinity results that are sensitive to rarefaction indicate suggest that not "
        "enough isoacceptors were measured to achieve 'statistical significance'. Separate output "
        "files are produced for the results of rarefaction.")
    group1G.add_argument(
        '--rarefaction-limit', metavar='INT', type=int, default=0,
        help="Any positive integer for the rarefaction limit will trigger rarefaction of tRNA "
             "isoacceptors for recomputations of functional affinities. The rarefaction limit sets "
             "the number of randomly drawn subsamples of isoacceptors. For example, given a sample "
             "with 10 isoacceptors used in the calculation of functional affinity, there are 10 "
             "combinations of 1 isoacceptor that can be subsampled for recalculation with 1 "
             "isoacceptor, 45 combinations of 2 isoacceptors, ..., 252 combinations of 5 "
             "isoacceptors, ..., and 10 combinations of 9 isoacceptors. Setting a rarefaction "
             "limit of 100 would not affect any subsamples with 100 or fewer combinations, but "
             "would, for example, cause random subsampling of 100 of the 252 possible combinations "
             "of 5 isoacceptors.")

    group2 = parser.add_argument_group('INFO')
    group2.add_argument(
        '-l', '--list-samples', default=False, action='store_true',
        help="List the names of tRNA-seq samples in `seeds-specific-txt` by using this flag with "
             "the `--seeds-specific-txt` argument.")

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
