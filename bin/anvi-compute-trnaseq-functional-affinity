#!/usr/bin/env python
# -*- coding: utf-8
"""Relate changes in tRNA-seq seed abundances to the codon usage of gene functions"""

import sys

import anvio
import anvio.genomictrnaseq as genomictrnaseq

from anvio.argparse import ArgumentParser
from anvio.genomictrnaseq import Affinitizer
from anvio.errors import ConfigError, FilesNPathsError


__author__ = "Developers of anvi'o (see AUTHORS.txt)"
__copyright__ = "Copyleft 2015-2022, the Meren Lab (http://merenlab.org/)"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__authors__ = ['semiller10']
__resources__ = []
__tags__ = ['trnaseq']
__requires__ = ['trnaseq-contigs-db', 'contigs-db']
__provides__ = []
__description__ = ("Relate changes in tRNA-seq seed abundances to the codon usage of gene functions")


def main(args):
    if args.list_sample_names:
        Affinitizer.list_sample_names(args)
    else:
        affinitizer = Affinitizer(args)
        affinitizer.go()


if __name__ == '__main__':
    parser = ArgumentParser(description=__description__)

    groupA = parser.add_argument_group('MANDATORY', "This program requires FOUR INPUT FILES and ONE REFERENCE SAMPLE NAME: "
                                       "(1) A `trnaseq`-variant contigs database produced by `anvi-merge-trnaseq` "
                                       "and linked to the following (meta)genomic contigs database by `anvi-integrate-trnaseq`, "
                                       "(2) a table of **specific** coverages of seeds produced by `anvi-tabulate-trnaseq`, "
                                       "(3) a (meta)genomic contigs database produced by `anvi-gen-contigs-database` "
                                       "that has been annotated with gene functions by `anvi-run-kegg-kofams`, "
                                       "(4) a table of gene codon frequencies produced by `anvi-get-codon-frequencies` "
                                       "from the (meta)genomic contigs database, and "
                                       "(5) the name of the sample to be used as the reference in the calculation of translation affinity. "
                                       "We assume that the (meta)genomic contigs database represents a single genome "
                                       "or contains a collection of genomes, where the collection of interest "
                                       "would have been specified in the `anvi-integrate-trnaseq` command... "
                                       "Otherwise the results won't be rational.")
    groupA.add_argument(*anvio.A('trnaseq-contigs-db'), **anvio.K('trnaseq-contigs-db'))
    groupA.add_argument(*anvio.A('seeds-specific-txt'), **anvio.K('seeds-specific-txt'))
    groupA.add_argument(*anvio.A('contigs-db'), **anvio.K('contigs-db', {'help': ("Anvi'o (meta)genomic contigs database generated by "
                                                                                  "'anvi-gen-contigs-database': NOT the tRNA-seq contigs database!")}))
    groupA.add_argument(*anvio.A('codons-frequencies-txt'), **anvio.K('codon-frequencies-txt'))
    groupA.add_argument('-r', '--reference-sample',
                        metavar='SAMPLE_NAME', type=str,
                        help="The name of the sample to be used as the reference in the calculation of translational affinity. "
                             "The samples in `seeds-specific-txt` can be found by looking at first entries of that table's 'sample_name' column, "
                             "or by running this program with the `--seeds-specific-txt` argument and the `--list-sample-names` flag.")

    groupB = parser.add_argument_group('OPTIONAL')
    groupB.add_argument('-b', '--sample-subset',
                        metavar='SAMPLE_NAMES', type=str,
                        help="Names of samples, beside the specified reference sample, to be analyzed. "
                             "By default, when this argument is not used, all of the samples in `seeds-specific-txt` are analyzed. "
                             "Separate provided sample names with a comma and no space. "
                             "The samples in `seeds-specific-txt` can be found by looking at first entries of that table's 'sample_name' column, "
                             "or by running this program with the `--seeds-specific-txt` argument and the `--list-sample-names` flag.")
    groupB.add_argument('-d', '--min-coverage',
                        metavar='INT', type=int,
                        default=Affinitizer.default_min_coverage,
                        help="The coverage threshold for detection of a tRNA isoacceptor. "
                             "Coverage is measured at the 3' (discriminator) nucleotide of the isoacceptor seeds. "
                             "The threshold must be met in both the sample being analyzed and reference sample for the isoacceptor to be analyzed.")
    groupB.add_argument('-i', '--min-isoacceptors',
                        metavar='INT', type=int,
                        default=Affinitizer.default_min_isoacceptors,
                        help="The minimum number of tRNA isoacceptors that need to be detected "
                             "in a population (bin) for translational affinity to be calculated.")
    groupB.add_argument('-e', '--rarefaction-limit',
                        metavar='INT', type=int,
                        default=Affinitizer.default_rarefaction_limit,
                        help="Any positive integer for the rarefaction limit will trigger rarefaction "
                             "of tRNA isoacceptors in recomputations of translational affinities. "
                             "The rarefaction limit sets the number of randomly drawn subsamples of isoacceptors. "
                             "For example, given a sample with 10 isoacceptors measured, there are 10 combinations "
                             "of 1 isoacceptor that can be subsampled for recalculation with 1 isoacceptor, "
                             "45 combinations of 2 isoacceptors, ..., 252 combinations of 5 isoacceptors, ..., "
                             "and 10 combinations of 9 isoacceptors. Setting a rarefaction limit of 100 "
                             "would not affect any subsamples with 100 or fewer combinations, but would, for example, "
                             "cause random subsampling of 100 of the 252 possible combinations of 5 isoacceptors.")

    groupC = parser.add_argument_group('OTHER')
    groupC.add_argument('-l', '--list-sample-names',
                        default=False, action='store_true',
                        help="Run the program with this flag and one other argument, `--seeds-specific-txt`, "
                             "to list the names of the samples in that table.")

    args = parser.get_args(parser)

    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
    except FilesNPathsError as e:
        print(e)
        sys.exit(-2)
