# -*- coding: utf-8
import os
import json
import os.path
import argparse

import numpy as np
import pandas as pd

import anvio
import anvio.utils as u
import anvio.workflows as w

from Bio import SeqIO
from anvio.errors import ConfigError
from anvio.workflows.external_ecophylo import ExternalEcoPhyloWorkflow

__author__ = "Matthew S. Schechter"
__copyright__ = "Copyright 2017, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Matthew S. Schechter"
__email__ = "mschechter@uchicago.edu"


M = ExternalEcoPhyloWorkflow(argparse.Namespace(config=config))
M.init()

dirs_dict = M.dirs_dict

rule EXTERNAL_ECO_PHYLO_WORKFLOW_target_rule:
    input: M.target_files

rule anvi_run_hmms_hmmsearch:
    """Run hmmsearch with input HMMs to get domtblout"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_run_hmms_hmmsearch-{sample_name}-{HMM}.log")
    input:
    output:
        done = touch(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-{HMM}-dom_hmmsearch/contigs-hmmsearch.done")),
        domtable = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-{HMM}-dom_hmmsearch/hmm.domtable"),
        hmm_table = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-{HMM}-dom_hmmsearch/hmm.table")
    params:
        hmm_source = M.get_param_value_from_config(['anvi_run_hmms_hmmsearch', '--installed-hmm-profile']),
    threads: M.T('anvi_run_hmms_hmmsearch')
    run:
        contigsDB = os.path.join(M.input_dirs_dict[wildcards.sample_name], f"{wildcards.sample_name}-contigs.db")
        HMM_dir = os.path.join(M.HMM_path_dict[wildcards.HMM])
        hmmer_output_dir = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], f"{wildcards.sample_name}-{wildcards.HMM}-dom_hmmsearch")

        internal_HMM_sources = ["Bacteria_71", "Archaeal_XX"]

        HMM_source = M.HMM_source_dict[wildcards.HMM]

        # Run different HMM search depending on whether a HMM is internal or external because anvio
        if HMM_source in internal_HMM_sources:
            print(f"Running internal HMM dataset: {HMM_source}")
            HMM_source = M.HMM_source_dict[wildcards.HMM]
            shell(f"anvi-run-hmms -c {contigsDB} \
                                --hmmer-program hmmsearch \
                                --hmmer-output-dir {hmmer_output_dir} \
                                -I {HMM_source} \
                                --domain-hits-table \
                                --just-do-it \
                                -T {threads} 2> {log}")
        else:
            HMM_dir = os.path.join(M.HMM_path_dict[wildcards.HMM])
            print("Running external HMM dataset: ", wildcards.HMM)
            shell(f"anvi-run-hmms -c {contigsDB} \
                            --hmmer-program hmmsearch \
                            --hmm-profile-dir {HMM_dir} \
                            --hmmer-output-dir {hmmer_output_dir} \
                            --domain-hits-table \
                            --just-do-it \
                            -T {threads} 2> {log}")

rule filter_hmm_hits_by_query_coverage:
    """
    Filter hmm_hits table in the contigsDB by query coverage using domtblout.
    This will remove any sketchy sequences that were recruited by the HMM.
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "filter_hmm_hits_by_query_coverage-{sample_name}-{HMM}.log")
    input:
        done = rules.anvi_run_hmms_hmmsearch.output.done,
        domtblout = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-{HMM}-dom_hmmsearch/hmm.domtable")
    output:
        done = touch(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-{HMM}-contigsDB_filtered.done"))
    params:
        query_coverage = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', '--query-coverage']),
        additional_params = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', 'additional_params'])
    threads: M.T('filter_hmm_hits_by_query_coverage')
    run:
        contigsDB = os.path.join(M.input_dirs_dict[wildcards.sample_name], f"{wildcards.sample_name}-contigs.db")
        domtblout = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], f"{wildcards.sample_name}-{wildcards.HMM}-dom_hmmsearch/hmm.domtable")
        HMM_source = M.HMM_source_dict[wildcards.HMM]
        HMM_dir = os.path.join(M.HMM_path_dict[wildcards.HMM])

        # FIXME: need to make a list of all internal sources
        internal_HMM_sources = ["Bacteria_71", "Archaeal_XX"]

        HMM_source = M.HMM_source_dict[wildcards.HMM]

        if HMM_source in internal_HMM_sources:
            shell(f"anvi-script-filter-hmm-hits-table -c {contigsDB} \
                                                    --domain-hits-table {domtblout} \
                                                    --hmm-source {HMM_source} \
                                                    --query-coverage {params.query_coverage} \
                                                    {params.additional_params} 2> {log}")
        else:
            shell(f"anvi-script-filter-hmm-hits-table -c {contigsDB} \
                                                    --domain-hits-table {domtblout} \
                                                    --hmm-profile-dir {HMM_dir} \
                                                    --hmm-source {HMM_source} \
                                                    --query-coverage {params.query_coverage} \
                                                    {params.additional_params} 2> {log}")

rule anvi_get_sequences_for_hmm_hits:
    """Extract all AA and NT sequences that were recruited by the HMM"""

    version: 1.0
    log: 
        AA = os.path.join(dirs_dict['LOGS_DIR'], "anvi_get_sequences_for_hmm_hits_AA-{sample_name}-{HMM}.log"),
        NT = os.path.join(dirs_dict['LOGS_DIR'], "anvi_get_sequences_for_hmm_hits_NT-{sample_name}-{HMM}.log")
    input:
        done_file = rules.filter_hmm_hits_by_query_coverage.output.done,
        contigsDB = ancient(lambda wildcards: os.path.join(M.input_dirs_dict[wildcards.sample_name], "%s-contigs.db" % wildcards.sample_name))
    output:
        done = touch(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}-{HMM}_hmm_hits.faa.done")),
        faa = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}-{HMM}_hmm_hits.faa"),
        fna = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_hmm_hits.fna"),
    threads: M.T('anvi_get_sequences_for_hmm_hits')
    run:
        HMM_source = M.HMM_source_dict[wildcards.HMM]
        shell(f"anvi-get-sequences-for-hmm-hits -c {input.contigsDB} \
                                               --hmm-sources  {HMM_source} \
                                               --get-aa-sequences \
                                               -o {output.faa} 2> {log.AA}")

        shell(f"anvi-get-sequences-for-hmm-hits -c {input.contigsDB} \
                                               --hmm-sources  {HMM_source} \
                                               -o {output.fna} 2> {log.NT}")





rule simplify_names_from_hmm_hits:
    """Clean up fasta headers for tree calculation"""

    version: 1.0
    log: 
        NT = os.path.join(dirs_dict['LOGS_DIR'], "simplify_names_from_hmm_hits_NT_{sample_name}_{HMM}.log"),
        AA = os.path.join(dirs_dict['LOGS_DIR'], "simplify_names_from_hmm_hits_AA_{sample_name}_{HMM}.log"),
    input: 
        NT = rules.anvi_get_sequences_for_hmm_hits.output.fna,
        AA = rules.anvi_get_sequences_for_hmm_hits.output.faa
    output:
        fasta_NT = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_hmm_hits_renamed.fna"),
        fasta_AA = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_hmm_hits_renamed.faa"),
        report_file_NT = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_reformat_report_nt.txt"),
        report_file_AA = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_reformat_report_AA.txt")
    threads: M.T('simplify_names_from_scg_hits_nt')
    run:
        prefix_list = [wildcards.sample_name, wildcards.HMM]
        prefix = "_".join(prefix_list) 

        shell(f"anvi-script-reformat-fasta {input.NT} \
                              --simplify-names \
                              --prefix {prefix} \
                              --report-file {output.report_file_NT} \
                              -o {output.fasta_NT} >> {log.NT} 2>&1")

        shell(f"anvi-script-reformat-fasta {input.AA} \
                              --simplify-names \
                              --prefix {prefix} \
                              --report-file {output.report_file_AA} \
                              -o {output.fasta_AA} >> {log.AA} 2>&1")


rule cat_sequences_to_one_fasta:
    """
    Cat all sequences from seperate metagenomes, genomes, SAGs, or MAGs into one fasta
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_sequences_to_one_fasta_{HMM}.log")
    input:
        NT = expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{HMM}}_hmm_hits_renamed.fna"), sample_names = M.names_list),
        AA = expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{HMM}}_hmm_hits_renamed.faa"), sample_names = M.names_list),
    output:
        NT_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{HMM}", "{HMM}_all.fna"),
        AA_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{HMM}", "{HMM}_all.faa"),
    threads: M.T('cat_sequences_to_one_fasta')
    run:
        shell(f"cat {input.NT} >> {output.NT_all}")

        shell(f"cat {input.AA} >> {output.AA_all}")


rule anvi_get_external_gene_calls_file:
    """Extract external_gene_calls table from all samples"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "get_external_gene_calls_file_{sample_name}_{HMM}.log")
    input:
        done = rules.anvi_get_sequences_for_hmm_hits.output.done,
    output:
        external_gene_calls = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_external_gene_calls.tsv")
    params:
        fasta = temp(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_orfs.fna")),
    threads: M.T('anvi_get_external_gene_calls_file')
    run:
        contigsDB = os.path.join(M.input_dirs_dict[wildcards.sample_name], f"{wildcards.sample_name}-contigs.db")
        shell('anvi-get-sequences-for-gene-calls -c {contigsDB} \
                                                 --external-gene-calls {output.external_gene_calls} \
                                                 -o {params.fasta} 2> {log}')


rule rename_and_filter_external_gene_calls_file:
    """
    Create primary key from external-gene-calls.txt to join with references sequences to make
    a contigsDB for the metagenomics workflow
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "rename_and_filter_external_gene_calls_file_{sample_name}_{HMM}.log")
    input:
        external_gene_calls = rules.anvi_get_external_gene_calls_file.output.external_gene_calls
    output:
        external_gene_calls_renamed = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{HMM}_external_gene_calls_renamed.tsv")
    threads: M.T('rename_and_filter_external_gene_calls_file')
    script:
        "scripts/rename_external_gene_calls_file.py"
 

rule cat_external_gene_calls_file:
    """Cat all external_gene_calls files from all samples into one file"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_external_gene_calls_file_{HMM}.log")
    input:
        external_gene_calls_renamed = expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{HMM}}_external_gene_calls_renamed.tsv"), sample_names = M.names_list),
    output:
        external_gene_calls_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{HMM}", "{HMM}_external_gene_calls_all.tsv"),
    threads: M.T('cat_external_gene_calls_file')
    run:
        shell(f"cat {input.external_gene_calls_renamed} >> {output.external_gene_calls_all} 2> {log}")