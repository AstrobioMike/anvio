# -*- coding: utf-8
import os
import glob
import json
import os.path
import argparse

import pandas as pd

import anvio
import anvio.utils as u
import anvio.workflows as w

from Bio import SeqIO
from anvio.errors import ConfigError
from anvio.workflows.scg_phylo import SCGPhylogeneticsWorkflow

__author__ = "Matthew S. Schechter"
__copyright__ = "Copyright 2017, The anvio Project"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = anvio.__version__
__maintainer__ = "Matthew S. Schechter"
__email__ = "mschechter@uchicago.edu"


M = SCGPhylogeneticsWorkflow(argparse.Namespace(config=config))
M.init()

dirs_dict = M.dirs_dict

rule ECO_PHYLO_WORKFLOW_target_rule:
    input: M.target_files

rule anvi_run_hmms_hmmsearch:
    """Run hmmsearch with input HMMs to get domtblout"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_run_hmms_hmmsearch_{sample_name}.log")
    input:
    output:
        touch(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-contigs-hmmsearch.done")),
        os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_dom_hmmsearch/hmm.domtable"),
        os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_dom_hmmsearch/hmm.table.fixed"),
        os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_dom_hmmsearch/hmm.table")
    params:
        hmm_source = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', '--hmm-source']),
    threads: M.T('anvi_get_sequences_for_hmm_hits_SCGs')
    run:
      hmmer_output_dir = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "%s_dom_hmmsearch" % wildcards.sample_name)
      contigsDB = os.path.join(M.input_dirs_dict[wildcards.sample_name], "%s-contigs.db" % wildcards.sample_name)

      shell("anvi-run-hmms -c %s \
                         --hmmer-program hmmsearch \
                         --hmmer-output-dir %s \
                         -I {params.hmm_source} \
                         --domain-hits-table \
                         --just-do-it \
                         -T {threads} 2> {log}" % (contigsDB, hmmer_output_dir))

rule filter_hmm_hits_by_query_coverage:
    """Filter hmm_hits table by query coverage using domtblout"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "filter_hmm_hits_by_query_coverage_{sample_name}.log")
    input:
        done = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}-contigs-hmmsearch.done"),
        domtblout = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_dom_hmmsearch/hmm.domtable"),
        fixed = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_dom_hmmsearch/hmm.table.fixed")
    output:
        touch(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_contigsDB_filtered.done"))
    params:
        hmm_source = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', '--hmm-source']),
        query_coverage = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', '--query-coverage']),
        additional_params = M.get_param_value_from_config(['filter_hmm_hits_by_query_coverage', 'additional_params'])
    threads: M.T('anvi_get_sequences_for_hmm_hits_SCGs')
    run:
      contigsDB = os.path.join(M.input_dirs_dict[wildcards.sample_name], "%s-contigs.db" % wildcards.sample_name)
      domtblout = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "%s_dom_hmmsearch/hmm.domtable" % wildcards.sample_name)

      shell("anvi-script-filter-hmm-hits-table -c %s \
                                               --domain-hits-table %s \
                                               --hmm-source {params.hmm_source} \
                                               --query-coverage {params.query_coverage} \
                                               {params.additional_params} 2> {log}" % (contigsDB, domtblout))


rule anvi_estimate_scg_taxonomy_for_SCGs:
    """Get SCG taxonomy for SCGs in Reference_protein_list.txt and the associated NT and AA sequences for each HMM hit"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_estimate_scg_taxonomy_for_SCGs_{sample_name}_{reference_protein_name}.log")
    input:
        done = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}_contigsDB_filtered.done"),
        contigsDB = ancient(lambda wildcards: os.path.join(M.input_dirs_dict[wildcards.sample_name], "{sample_name}-contigs.db"))
    output:
        done = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{reference_protein_name}_anvi_estimate_scg_taxonomy_for_SCGs.done"),
        taxonomy = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}_estimate_scg_taxonomy_results.tsv"),
        DNA_fasta = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}_DNA.fa"),
        AA_fasta = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}_AA.fa")
    params:
        fasta_prefix = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}")
    threads: M.T('anvi_estimate_scg_taxonomy_for_SCGs')
    run:
        shell('anvi-estimate-scg-taxonomy -c {input.contigsDB} \
                                          --metagenome-mode \
                                          --scg-name-for-metagenome-mode {wildcards.reference_protein_name} \
                                          --report-scg-sequences-file-prefix {params.fasta_prefix} \
                                          -T {threads} \
                                          -o {output.taxonomy} &> {log}')
        shell('touch {output.done}')


rule anvi_get_external_gene_calls_file:
    """Extract external_gene_calls table from all samples"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "get_external_gene_calls_file_{sample_name}_{reference_protein_name}.log")
    input:
        done = rules.anvi_estimate_scg_taxonomy_for_SCGs.output,
        contigsDB = ancient(lambda wildcards: os.path.join(M.input_dirs_dict[wildcards.sample_name], "%s-contigs.db" % wildcards.sample_name))
    output:
        external_gene_calls = os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}_external_gene_calls.tsv")
    params:
        fasta = temp(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{reference_protein_name}_orfs.fna")),
    threads: M.T('anvi_get_sequences_for_hmm_hits_SCGs')
    run:
        shell('anvi-get-sequences-for-gene-calls -c {input.contigsDB} \
                                                 --external-gene-calls {output.external_gene_calls} \
                                                 -o {params.fasta} 2> {log}')


rule cat_external_gene_calls_file:
    """Cat all external_gene_calls files from all samples into one file"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_ribo_proteins_to_one_fasta_{reference_protein_name}.log")
    input:
        external_gene_calls_renamed = expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{reference_protein_name}}_external_gene_calls.tsv"), sample_names = M.names_list, reference_protein_names = M.Reference_protein_list),
    output:
        external_gene_calls_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_external_gene_calls_all.tsv"),
    threads: M.T('cat_ribo_proteins_to_one_fasta')
    run:
        shell("cat {input.external_gene_calls_renamed} >> {output.external_gene_calls_all} 2> {log}")


rule rename_and_filter_external_gene_calls_file_all:
    """
    Create primary key from external-gene-calls.txt to join with references sequences to make
    a contigsDB for the metagenomics workflow
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "rename_and_filter_external_gene_calls_file_all_{reference_protein_name}.log")
    input:
        external_gene_calls_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_external_gene_calls_all.tsv"),
        headers = os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_headers.tmp")
    output:
        external_gene_calls_renamed = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_external_gene_calls_all_renamed.tsv"),
        done = touch(os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_external_gene_calls_all_renamed.done"))
    threads: 5
    script:
        "scripts/rename_external_gene_calls_file.py"


rule cat_scgs_to_one_fasta_nt:
    """Cat all SCG sequences from seperate metagenomes into one fasta"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_ribo_proteins_to_one_fasta_{reference_protein_name}.log")
    input:
        fasta = expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{reference_protein_name}}_DNA.fa"), sample_names = M.names_list),
    output:
        fasta_all = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_NT.fa"),
    threads: M.T('cat_ribo_proteins_to_one_fasta')
    run:
        shell("cat {input.fasta} >> {output.fasta_all} 2> {log}")


rule cat_scgs_to_one_fasta_aa:
    """Cat all SCG AA sequences from seperate metagenomes into one fasta"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_ribo_proteins_to_one_fasta_{reference_protein_name}.log")
    input: expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_names}", "{sample_names}_{{reference_protein_name}}_AA.fa"), sample_names = M.names_list, reference_protein_names = M.Reference_protein_list)
    output: fasta = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_AA.fa")
    threads: M.T('cat_ribo_proteins_to_one_fasta')
    run:
        shell("cat {input} >> {output} 2> {log}")


rule cat_misc_data_to_one_file:
    """Cat all sequence misc data from separate samples in one tsv"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cat_ribo_proteins_to_one_fasta_{reference_protein_name}.log")
    input: expand(os.path.join(dirs_dict['EXTRACTED_RIBO_PROTEINS_DIR'], "{sample_name}", "{sample_name}_{{reference_protein_name}}_estimate_scg_taxonomy_results.tsv"), sample_name = M.names_list)
    output: os.path.join(dirs_dict['MISC_DATA'], "{reference_protein_name}/{reference_protein_name}_all_misc_data.tsv")
    threads: M.T('cat_misc_data_to_one_file')
    run:
        shell("cat {input} >> {output} 2> {log}")


rule cluster_X_percent_sim_mmseqs:
    """
    Cluster SCG NT sequences with mmseqs to remove redundant SCG sequences which will prevent non-specific read recruitment
    and read recruitment dilution.
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "cluster_90_mmseqs_{reference_protein_name}.log")
    input: rules.cat_scgs_to_one_fasta_nt.output
    output: os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}", "{reference_protein_name}_mmseqs_NR_rep_seq.fasta")
    params:
        output_prefix = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}", "{reference_protein_name}_mmseqs_NR"),
        mmseqs_tmp = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}", "{reference_protein_name}_tmp"),
        min_seq_id = M.get_param_value_from_config(['remove_redundant_sequences_mmseqs', '--min-seq-id'])
    threads: M.T('remove_redundant_sequences_mmseqs')
    shell:
        "mmseqs easy-cluster {input} \
                             {params.output_prefix} \
                             {params.mmseqs_tmp} \
                             --threads {threads} \
                             --min-seq-id {params.min_seq_id} >> {log} 2>&1"


rule subset_AA_seqs_with_mmseqs_reps:
    """Subset AA sequences for the mmseqs cluster representatives"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_reformat_fasta_ribosomal_protein_file_{reference_protein_name}.log")
    input:
        fa = rules.cat_scgs_to_one_fasta_aa.output,
        reps = rules.cluster_X_percent_sim_mmseqs.output
    output:
        fasta = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_AA_subset.fa"),
        headers = temp(os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_headers.tmp"))
    threads: M.T('anvi_script_reformat_fasta')
    shell:
        """
        grep '>' {input.reps} | sed 's/>//g' > {output.headers}

        anvi-script-reformat-fasta {input.fa} -I {output.headers} -o {output.fasta} >> {log} 2>&1
        """


rule align_sequences:
    """MSA of AA sequences subset."""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "align_sequences_{reference_protein_name}.log")
	input: rules.subset_AA_seqs_with_mmseqs_reps.output.fasta
	output: os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_aligned.fa")
	threads: M.T('align_sequences')
	shell:
		"muscle -in {input} -out {output} -maxiters 2 -verbose 2> {log}"


rule trim_alignments:
    """Trim alignment"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "trim_alignments_{reference_protein_name}.log")
    input: rules.align_sequences.output
    output: os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_aligned_trimmed.fa")
    params:
        gt = M.get_param_value_from_config(['trim_alignments', '-gt']),
        gappyout = M.get_rule_param('trim_alignments', '-gappyout'),
        additional_params = M.get_param_value_from_config(['trim_alignments', 'additional_params'])
    shell:
        'trimal -in {input} \
                -out {output} \
                {params.gappyout} \
                {params.additional_params} 2> {log}'

rule remove_sequences_with_X_percent_gaps:
    """Removing sequences that have Z > X% gaps"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "remove_gaps_{reference_protein_name}.log")
    input: rules.trim_alignments.output
    output: os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_aligned_trimmed_filtered.fa")
    params:
        seq_counts_tsv = os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_gaps_counts"),
        max_percentage_gaps = M.get_param_value_from_config(['remove_sequences_with_X_percent_gaps', '--max-percentage-gaps'])
    threads: M.T('remove_gaps')
	shell:
		"anvi-script-reformat-fasta {input} \
									-o {output} \
									--max-percentage-gaps {params.max_percentage_gaps} \
									--export-gap-counts-table {params.seq_counts_tsv} >> {log} 2>&1"


rule count_num_sequences_filtered:
    """Record the number of sequences filtered at each step of the workflow"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "count_num_sequences_filtered_{reference_protein_name}.log")
    input:
        step1 = rules.cat_scgs_to_one_fasta_nt.output,
        step2 = rules.cluster_X_percent_sim_mmseqs.output,
        step3 = rules.remove_sequences_with_X_percent_gaps.output
    output: os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_MSA_STATS'], "{reference_protein_name}/{reference_protein_name}_stats.tsv")
    threads: M.T('trim_alignments_2')
    shell:
        """
        # How many SCGs (e.g. Ribosomal_L16) did we recruit across all input data (genomes and metagenomes)?
        step1=$(grep -c '>' {input.step1})
        echo -e "cat_scgs_to_one_fasta_nt\t$step1\t{input.step1}\n" > {output}

        # How many SCGs do we have after we cluster them at the nt level and pick representatives?
        step2=$(grep -c '>' {input.step2})
        echo -e "cluster_X_percent_sim_mmseqs\t$step2\t{input.step2}\n" >> {output}

        # How many seqs are in the NR set?
        step3=$(grep -c '>' {input.step3})
        echo -e "remove_sequences_with_X_percent_gaps\t$step3\t{input.step3}\n" >> {output}

        # Add column names here
        echo -e "Rule_name\tNum_sequences\trel_path\n$(cat {output})" > {output}
        """

# if M.external_genomes:
#     rule add_misc_layer_to_detect_if_genomic_SCG_in_cluster:
#         """
#         """
#         version: 1.0
#         input:
#             misc_data = os.path.join(dirs_dict['MISC_DATA'], "{reference_protein_name}/{reference_protein_name}_all_misc_data.tmp"),
#             final_list_of_sequences_for_tree_calculation = os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_aligned_trimmed_filtered.fa")
#         output:
#             misc_data_final = os.path.join(dirs_dict['MISC_DATA'], "{reference_protein_name}/{reference_protein_name}_all_misc_data.tsv")
#         params:
#             external_genomes = M.external_genomes_names_list,
#             cluster_rep_index = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}", "{reference_protein_name}_mmseqs_NR_cluster.tsv")
#         threads: M.T('join_renamed_fasta_with_misc_data')
#         script:
#           "scripts/add_layer_for_reps.py"

# else:
#     rule add_misc_layer_to_detect_if_genomic_SCG_in_cluster:
#         """
#         """
#         version: 1.0
#         input:
#             misc_data = os.path.join(dirs_dict['MISC_DATA'], "{reference_protein_name}/{reference_protein_name}_all_misc_data.tmp"),
#             final_list_of_sequences_for_tree_calculation = os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_aligned_trimmed_filtered.fa")
#         output:
#             misc_data_final = os.path.join(dirs_dict['MISC_DATA'], "{reference_protein_name}/{reference_protein_name}_all_misc_data.tsv")
#         params:
#             cluster_rep_index = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}", "{reference_protein_name}_mmseqs_NR_cluster.tsv")
#         threads: M.T('join_renamed_fasta_with_misc_data')
#         script:
#             "scripts/add_layer_for_reps_no_external_genomes.py"


rule subset_DNA_reps_with_QCd_AA_reps_for_mapping:
    """Filter for SCG NT sequences what will be used for read recruitment later"""

    version: 1.0
    input:
        fasta = rules.cat_scgs_to_one_fasta_nt.output,
        reps = rules.remove_sequences_with_X_percent_gaps.output
    output:
        NT_for_mapping = os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_name}/{reference_protein_name}_references_for_mapping_NT.fa"),
        headers = os.path.join(dirs_dict['MSA'], "MSA/{reference_protein_name}/{reference_protein_name}_headers.tmp")
    threads: M.T('join_renamed_fasta_with_misc_data')
    run:
        shell("grep '>' {input.reps} | sed 's/>//g' > {output.headers}")
        shell("anvi-script-reformat-fasta {input.fasta} -I {output.headers} -o {output.NT_for_mapping}")


rule make_fasta_txt:
    """Output fasta.txt that will be used with the metagenomics workflow"""

    version: 1.0
    input:
        expand(os.path.join(dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], "{reference_protein_names}/{reference_protein_names}_external_gene_calls_all_renamed.done"), reference_protein_names = M.Reference_protein_list)
    output:
        fasta_txt = os.path.join("ECO_PHYLO_WORKFLOW", "fasta.txt"),
    threads: M.T('join_renamed_fasta_with_misc_data')
    run:
        fastas = [os.path.join("..", dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], r + "/" + r + '_references_for_mapping_NT.fa') for r in M.Reference_protein_list]
        external_gene_calls = [os.path.join("..", dirs_dict['RIBOSOMAL_PROTEIN_FASTAS'], r + "/" + r + '_external_gene_calls_all_renamed.tsv') for r in M.Reference_protein_list]

        list_of_strings = ['\t'.join(t) + '\n' for t in zip(M.Reference_protein_list, fastas, external_gene_calls)]

        shell('echo -e "name\tpath\texternal_gene_calls" > {output.fasta_txt}')
        shell('echo -n "%s" >> {output.fasta_txt}' % ''.join(list_of_strings))


rule make_metagenomics_config_file:
    """Make a metagenomics_config.json customized for ECO_PHYLO_WORKFLOW"""

    version: 1.0
    input:
        rules.make_fasta_txt.output.fasta_txt
    output:
        config = os.path.join("METAGENOMICS_WORKFLOW", "metagenomics_config.json")
    threads: M.T('join_renamed_fasta_with_misc_data')
    run:

        shell('anvi-run-workflow -w metagenomics --get-default-config {output.config}')

        config = open(output.config)
        config_dict = json.load(config)
        config_dict['fasta_txt'] = '../ECO_PHYLO_WORKFLOW/fasta.txt'
        config_dict['samples_txt'] = '../samples.txt'
        config_dict['references_mode'] = True
        config_dict['anvi_run_hmms']['run'] = False
        config_dict["anvi_script_reformat_fasta"]['run'] = False
        config_dict['anvi_run_kegg_kofams']['run'] = False
        config_dict['anvi_run_ncbi_cogs']['run'] = False
        config_dict['anvi_run_scg_taxonomy']['run'] = False
        config_dict['anvi_run_trna_scan']['run'] = False
        config_dict['anvi_run_scg_taxonomy']['run'] = False
        config_dict['iu_filter_quality_minoche']['run'] = False
        config_dict['anvi_profile']['--min-contig-length'] = 0
        config_dict['bowtie']['threads'] = 5

        if M.clusterize_metagenomics_workflow == True:
            config_dict['bowtie']['threads'] = 10
            config_dict['anvi_profile']['threads'] = 10
            config_dict['anvi_merge']['threads'] = 10
        else:
            pass

        with open(output.config, "w") as outfile:
          json.dump(config_dict, outfile, indent=4)


rule run_metagenomics_workflow:
    """Run metagenomics workflow"""

    version: 1.0
    input:
        config = rules.make_metagenomics_config_file.output.config,
    output:
        touch(os.path.join("METAGENOMICS_WORKFLOW", "metagenomics_workflow.done"))
    threads: M.T('run_metagenomics_workflow')
    run:
        if M.clusterize_metagenomics_workflow == True:
            shell('cd METAGENOMICS_WORKFLOW/ && anvi-run-workflow -w metagenomics -c metagenomics_config.json --additional-params --cluster \'clusterize -j={{rule}} -o={{log}} -n={{threads}} -x\' --cores 200 --resource nodes=200 --latency-wait 100 --keep-going --rerun-incomplete && cd ..')
        else:
            shell('cd METAGENOMICS_WORKFLOW/ && anvi-run-workflow -w metagenomics -c metagenomics_config.json -A --rerun-incomplete --latency-wait 100 --keep-going && cd ..')


rule make_ECO_PHYLO_WORKFLOW_state_file:
    """Make a state file customized for ribo_phylo workflow interactive interface"""

    version: 1.0
    input:
        num_tree_tips = rules.rename_and_filter_external_gene_calls_file_all.output.external_gene_calls_renamed,
        done = os.path.join("METAGENOMICS_WORKFLOW/07_SUMMARY", "{reference_protein_name}_summarize.done")
    output:
        state_file = os.path.join("ECO_PHYLO_WORKFLOW", "{reference_protein_name}_ECO_PHYLO_WORKFLOW_state.json")
    threads: M.T('join_renamed_fasta_with_misc_data')
    run:
        state_dict = {}

        # basics
        state_dict['version'] = '3'
        state_dict['tree-type'] = 'phylogram'

        # height and width
        num_tree_tips = pd.read_csv(input.num_tree_tips, \
                  sep="\t", \
                  index_col=None)
        
        num_SCGs = num_tree_tips.shape[0]
        num_metagenomes = len(M.input_dirs_dict)

        X = 1
        Y = 20
        if num_SCGs < 50:
            state_dict['tree-height'] = '0'
            state_dict['tree-width'] = '0'
        else:
            state_dict['tree-height'] = X * num_SCGs
            state_dict['tree-width'] = Y * num_SCGs

        # layer-orders
        first_layers = ["__parent__", "length", "gc_content"]
        metagenomes = []

        for metagenome in M.input_dirs_dict:
          metagenomes.append(metagenome)


        if M.mode == "both":
          last_layers = ["contig_db_type", "has_genomic_SCG_in_cluster", "orig_name", "sample", "split_name", "t_domain", "t_phylum", "t_class", "t_order", "t_family", "t_genus", "t_species",]

        else:
          last_layers = ["orig_name", "sample", "split_name", "t_domain", "t_phylum", "t_class", "t_order", "t_family", "t_genus", "t_species",]

        layer_order = first_layers + metagenomes + last_layers

        state_dict['layer-order'] = layer_order

        # layers
        layers_dict = {}

        metagenome_layers_dict = {}

        metagenome_attributes = {
          "color": "#000000",
          "height": "180",
          "margin": "15",
          "type": "bar",
          "color-start": "#FFFFFF"
        }

        for metagenome in metagenomes:
            metagenome_layers_dict[str(metagenome)] = metagenome_attributes

        last_layers_dict = {}

        layer_attributes = {
          "color": "#000000",
          "height": "180",
          "margin": "15",
          "type": "color",
          "color-start": "#FFFFFF"
        }

        for layer in last_layers:
            last_layers_dict[str(layer)] = layer_attributes

        layer_attributes_parent = {
          "color": "#000000",
          "height": "0",
          "margin": "15",
          "type": "color",
          "color-start": "#FFFFFF"
        }

        layers_dict.update(metagenome_layers_dict)
        layers_dict.update(last_layers_dict)
        layers_dict['__parent__'] = layer_attributes_parent

        state_dict['layers'] = layers_dict

        with open(output.state_file, "w") as outfile:
                  json.dump(state_dict, outfile, indent=4)

if M.run_iqtree == True:
  rule iqtree:
      """Calculate a phylogenetic tree using iqtree"""

      version: 1.0
      log: os.path.join(dirs_dict['LOGS_DIR'], "iqtree_{reference_protein_name}.log")
      input: rules.remove_sequences_with_X_percent_gaps.output
      output: 
          tree = os.path.join(dirs_dict['TREES'], "{reference_protein_name}/{reference_protein_name}.iqtree"),
          done = touch(os.path.join(dirs_dict['TREES'], "{reference_protein_name}/{reference_protein_name}_tree.done"))
      params:
          outfile=os.path.join(dirs_dict['TREES'], "{reference_protein_name}/{reference_protein_name}"),
          model = M.get_param_value_from_config(['iqtree', '-m']),
          additional_params = M.get_param_value_from_config(['iqtree', 'additional_params'])
      threads: M.T('iqtree')
      shell:
          "iqtree -s {input} \
                  -nt AUTO \
                  -m {params.model} \
                  -pre {params.outfile} \
                  -T AUTO \
                  {params.additional_params} >> {log} 2>&1"

elif M.run_fasttree == True:
  rule fasttree:
      """Want to go faster?? Then Fasttree"""

      version: 1.0
      log: os.path.join(dirs_dict['LOGS_DIR'], "fasttree_{reference_protein_name}.log")
      input: rules.remove_sequences_with_X_percent_gaps.output
      output:
          tree = os.path.join(dirs_dict['TREES'], "{reference_protein_name}/{reference_protein_name}.nwk"),
          done = touch(os.path.join(dirs_dict['TREES'], "{reference_protein_name}/{reference_protein_name}_tree.done"))
      params:
          additional_params = M.get_param_value_from_config(['fasttree', 'additional_params'])
      threads: M.T('fasttree')
      shell:
          "FastTree -fastest {input} 2> {log} 1> {output.tree}"

rule add_default_collection:
    """"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "add_default_collection_{reference_protein_name}.log")
    input: 
        metagenomics_workflow_done = os.path.join("METAGENOMICS_WORKFLOW", "metagenomics_workflow.done")
    params:
        contigsDB = ancient(os.path.join("METAGENOMICS_WORKFLOW/03_CONTIGS", "{reference_protein_name}-contigs.db")),
        profileDB = os.path.join("METAGENOMICS_WORKFLOW/06_MERGED", "{reference_protein_name}", "PROFILE.db")
    output: touch(os.path.join("METAGENOMICS_WORKFLOW", "{reference_protein_name}_add_default_collection.done"))
    threads: M.T('cat_misc_data_to_one_file')
    shell:
        """
        anvi-script-add-default-collection -c {params.contigsDB} \
                                           -p {params.profileDB}
        """

rule anvi_summarize:
    """
    """

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_summarize_{reference_protein_name}.log")
    input: 
        done = os.path.join("METAGENOMICS_WORKFLOW", "{reference_protein_name}_add_default_collection.done")
    params:
        contigsDB = ancient(os.path.join("METAGENOMICS_WORKFLOW/03_CONTIGS", "{reference_protein_name}-contigs.db")),
        profileDB = os.path.join("METAGENOMICS_WORKFLOW/06_MERGED", "{reference_protein_name}", "PROFILE.db"),
        output_dir = os.path.join("METAGENOMICS_WORKFLOW/07_SUMMARY", "{reference_protein_name}")
    output: touch(os.path.join("METAGENOMICS_WORKFLOW/07_SUMMARY", "{reference_protein_name}_summarize.done"))
    threads: M.T('cat_misc_data_to_one_file')
    shell:
        """
        anvi-summarize -c {params.contigsDB} \
                       -p {params.profileDB} \
                       -o {params.output_dir} \
                       -C DEFAULT \
                       --init-gene-coverages \
                       --just-do-it;

        """

rule combine_data:
    """Joins read recruitment and taxonomy data for interactive interface"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "combine_data_{reference_protein_name}.log")
    input:
        done = os.path.join("METAGENOMICS_WORKFLOW/07_SUMMARY", "{reference_protein_name}_summarize.done")
    output: touch(os.path.join("{reference_protein_name}_combined.done"))
    threads: M.T('cat_misc_data_to_one_file')
    shell:
        """
        script=$(which anvi-self-test | sed 's|bin/anvi-self-test|anvio/workflows/scg_phylo/scripts/convert_names_to_split_names.R|')

        Rscript "$script" --SCG {wildcards.reference_protein_name} \
                          --ribophylopath ECO_PHYLO_WORKFLOW \
                          --profilepath METAGENOMICS_WORKFLOW &> {log}
        """

rule anvi_import_state:
    """Import state file for interactive interface"""

    version: 1.0
    log: os.path.join(dirs_dict['LOGS_DIR'], "anvi_import_state_{reference_protein_name}.log")
    input:
        rules.make_ECO_PHYLO_WORKFLOW_state_file.output
    params:
        state_file = os.path.join("ECO_PHYLO_WORKFLOW", "{reference_protein_name}_ECO_PHYLO_WORKFLOW_state.json"),
        profileDB = os.path.join("METAGENOMICS_WORKFLOW/06_MERGED", "{reference_protein_name}", "PROFILE.db")
    output: touch(os.path.join("{reference_protein_name}_state_imported.done"))
    threads: M.T('cat_misc_data_to_one_file')
    shell:
        """
        anvi-import-state -p {params.profileDB} \
                          -s {params.state_file} \
                          -n {wildcards.reference_protein_name}
        """
