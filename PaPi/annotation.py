# -*- coding: utf-8

# Copyright (C) 2014, A. Murat Eren
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Please read the COPYING file.

"""
    Here is described the annotation class. Any parser implemented in parsers.py must generate headers
    matching 'header' variable.
"""

header = ['prot', 'contig', 'start', 'end', 'direction', 'taxonomy', 'figfam', 'function']
mapping = [str  ,   str   ,   int ,   int ,     str    ,    str    ,    str  ,    str    ]


import PaPi.utils as utils
import PaPi.dictio as dictio


class Annotation:
    def __init__(self):
        self.annotation = {'proteins': {}, 'contigs': {}}


    def init_from_matrix(self, source):
        if type(source) == type(dict()):
            self.annotation['proteins'] = source
        if type(source) == type(str()):
            self.annotation['proteins'] = utils.get_TAB_delimited_file_as_dictionary(source,
                                                                                     column_names = header,
                                                                                     column_maping = mapping)

        prot = self.annotation['proteins']
        cont = self.annotation['contigs']

        for p in prot:
            if cont.has_key(prot[p]['contig']):
                cont[prot[p]['contig']].add(p)
            else:
                cont[prot[p]['contig']] = set([p])
        print self.annotation['contigs']


    def init_from_dict(self, source):
        d = dictio.read_serialized_object(source)
        if 'protein' not in d.keys() or 'contigs' not in d.keys():
            raise utils.ConfigError, "'%s' does not seem to be an annotation dictionary generated by PaPi :/" % source


    def store_annotation_dict(self, output_file_path):
        dictio.write_serialized_object(self.annotation, output_file_path)


    def store_annotation_matrix(self, output_file_path):
        utils.store_dict_as_TAB_delimited_file(self.annotation['proteins'], output_file_path, header)
